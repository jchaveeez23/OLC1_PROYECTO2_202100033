/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,5],$V1=[1,27],$V2=[1,28],$V3=[1,6],$V4=[1,7],$V5=[1,10],$V6=[1,11],$V7=[1,12],$V8=[1,13],$V9=[1,14],$Va=[1,15],$Vb=[1,16],$Vc=[1,18],$Vd=[1,29],$Ve=[1,30],$Vf=[1,31],$Vg=[1,32],$Vh=[1,33],$Vi=[1,34],$Vj=[1,35],$Vk=[1,5,9,10,11,12,26,28,29,30,31,32,33,35,38,52,54,55,57,58,61,62,63,66,68,69,70,71,73,74,75,76],$Vl=[1,45],$Vm=[1,46],$Vn=[1,48],$Vo=[1,57],$Vp=[1,54],$Vq=[1,55],$Vr=[1,63],$Vs=[1,52],$Vt=[1,53],$Vu=[1,56],$Vv=[1,58],$Vw=[1,59],$Vx=[1,60],$Vy=[1,61],$Vz=[1,64],$VA=[1,65],$VB=[1,66],$VC=[1,67],$VD=[1,68],$VE=[1,69],$VF=[5,9,10],$VG=[1,5,9,10,11,12,20,21,23,26,28,29,30,31,32,33,35,38,52,54,55,57,58,61,62,63,66,68,69,70,71,73,74,75,76,87,100,101,102,103,104,105,106,107,108,109,110,111],$VH=[1,95],$VI=[1,98],$VJ=[1,99],$VK=[1,100],$VL=[1,101],$VM=[1,102],$VN=[1,103],$VO=[1,104],$VP=[1,105],$VQ=[1,106],$VR=[1,107],$VS=[1,108],$VT=[1,109],$VU=[1,110],$VV=[1,111],$VW=[1,122],$VX=[1,117],$VY=[1,118],$VZ=[1,119],$V_=[1,120],$V$=[1,121],$V01=[5,9,10,22,23,53,59,64,65,67,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99],$V11=[2,24],$V21=[9,10,11,12,26,28,29,30,31,32,33,35,52,58,63,68,70,73,75,76],$V31=[13,22,24],$V41=[1,154],$V51=[5,9,10,22,23],$V61=[2,83],$V71=[5,9,10,22,23,53,59,64,65,67,85,98,99],$V81=[5,9,10,11,12,15,22,23,26,28,29,30,31,32,33,35,39,52,58,63,68,70,73,74,75],$V91=[9,10,11,12,26,28,29,30,31,32,33,35,52,54,55,57,58,63,68,70,73,75],$Va1=[1,194],$Vb1=[9,10,11,12,26,28,29,30,31,32,33,35,52,58,63,68,70,73,74,75],$Vc1=[9,10,11,12,26,28,29,30,31,32,33,35,38,52,58,63,68,70,73,75],$Vd1=[5,9,10,22,23,24,53,59,64,65,67,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99],$Ve1=[2,132],$Vf1=[22,23],$Vg1=[5,9,10,22,23,53,59,64,65,67,85,86,87,92,93,94,95,96,97,98,99],$Vh1=[5,9,10,22,23,53,59,64,65,67,85,86,87,88,89,91,92,93,94,95,96,97,98,99],$Vi1=[5,9,10,22,23,53,59,64,65,67,85,92,93,94,95,96,97,98,99],$Vj1=[1,229],$Vk1=[1,237],$Vl1=[1,245],$Vm1=[9,10,12,20,21,23,33,87,100,101,102,103,104,105,106,107,108,109,110,111],$Vn1=[12,23],$Vo1=[9,10,11,12,26,28,29,30,31,32,33,35,52,54,58,63,68,70,73,75],$Vp1=[1,277],$Vq1=[9,10,11,12,26,28,29,30,31,32,33,35,52,58,63,68,70,73,75],$Vr1=[9,10,11,12,26,28,29,30,31,32,33,35,52,55,58,61,62,63,68,70,73,75],$Vs1=[55,61,62],$Vt1=[54,55,57],$Vu1=[9,10],$Vv1=[9,10,11,12,26,28,29,30,31,32,33,35,52,58,63,66,68,70,73,75];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"programa":3,"sentencias":4,"EOF":5,"instruccion":6,"sentencia":7,"separador":8,"NEWLINE":9,";":10,"INGRESAR":11,"ID":12,"COMO":13,"tipo_dato":14,"CONVALOR":15,"expresion":16,"lista_ids":17,"lista_expresiones":18,"LISTA":19,"(":20,"NUMERO":21,",":22,")":23,"ASIGNAR":24,"acceso_lista":25,"IMPRIMIR":26,"NL":27,"INCREMENTO":28,"DECREMENTO":29,"CONTINUAR":30,"DETENER":31,"RETORNAR":32,"EJECUTAR":33,"estructura_control":34,"OBJETO":35,"lista_atributos":36,"METODO":37,"FIN_METODO":38,"CON_PARAMETROS":39,"lista_parametros":40,"separadores_opt":41,".":42,"INCREMENTO_OP":43,"DECREMENTO_OP":44,"condicional_si":45,"seleccion_multiple":46,"ciclo_para":47,"ciclo_mientras":48,"ciclo_repetir":49,"declaracion_funcion":50,"declaracion_procedimiento":51,"SI":52,"ENTONCES":53,"FIN_SI":54,"ELSE":55,"lista_condiciones_osi":56,"O_SI":57,"SEGUN":58,"HACER":59,"lista_casos":60,"FIN_SEGUN":61,"CASO":62,"PARA":63,"HASTA":64,"CON_INCREMENTO":65,"FIN_PARA":66,"CON_DECREMENTO":67,"MIENTRAS":68,"FIN_MIENTRAS":69,"REPETIR":70,"HASTA_QUE":71,"parametro":72,"FUNCION":73,"FIN_FUNCION":74,"PROCEDIMIENTO":75,"FIN_PROCEDIMIENTO":76,"TIPO_ENTERO":77,"TIPO_DECIMAL":78,"TIPO_BOOLEANO":79,"TIPO_CARACTER":80,"TIPO_CADENA":81,"expresion_lista":82,"lista_anidada":83,"[":84,"]":85,"+":86,"-":87,"*":88,"/":89,"^":90,"%":91,"IGUAL_IGUAL":92,"DIFERENTE":93,"MENOR_QUE":94,"MENOR_IGUAL":95,"MAYOR_QUE":96,"MAYOR_IGUAL":97,"AND":98,"OR":99,"NOT":100,"DECIMAL":101,"CADENA":102,"CARACTER":103,"VERDADERO":104,"FALSO":105,"MINUSCULA":106,"MAYUSCULA":107,"LONGITUD":108,"TRUNCAR":109,"REDONDEAR":110,"TIPO":111,"atributo":112,"separadores":113,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"NEWLINE",10:";",11:"INGRESAR",12:"ID",13:"COMO",15:"CONVALOR",19:"LISTA",20:"(",21:"NUMERO",22:",",23:")",24:"ASIGNAR",26:"IMPRIMIR",27:"NL",28:"INCREMENTO",29:"DECREMENTO",30:"CONTINUAR",31:"DETENER",32:"RETORNAR",33:"EJECUTAR",35:"OBJETO",37:"METODO",38:"FIN_METODO",39:"CON_PARAMETROS",42:".",43:"INCREMENTO_OP",44:"DECREMENTO_OP",52:"SI",53:"ENTONCES",54:"FIN_SI",55:"ELSE",57:"O_SI",58:"SEGUN",59:"HACER",61:"FIN_SEGUN",62:"CASO",63:"PARA",64:"HASTA",65:"CON_INCREMENTO",66:"FIN_PARA",67:"CON_DECREMENTO",68:"MIENTRAS",69:"FIN_MIENTRAS",70:"REPETIR",71:"HASTA_QUE",73:"FUNCION",74:"FIN_FUNCION",75:"PROCEDIMIENTO",76:"FIN_PROCEDIMIENTO",77:"TIPO_ENTERO",78:"TIPO_DECIMAL",79:"TIPO_BOOLEANO",80:"TIPO_CARACTER",81:"TIPO_CADENA",84:"[",85:"]",86:"+",87:"-",88:"*",89:"/",90:"^",91:"%",92:"IGUAL_IGUAL",93:"DIFERENTE",94:"MENOR_QUE",95:"MENOR_IGUAL",96:"MAYOR_QUE",97:"MAYOR_IGUAL",98:"AND",99:"OR",100:"NOT",101:"DECIMAL",102:"CADENA",103:"CARACTER",104:"VERDADERO",105:"FALSO",106:"MINUSCULA",107:"MAYUSCULA",108:"LONGITUD",109:"TRUNCAR",110:"REDONDEAR",111:"TIPO"},
productions_: [0,[3,2],[3,1],[3,3],[4,2],[4,0],[7,2],[7,1],[8,1],[8,1],[6,6],[6,4],[6,6],[6,4],[6,12],[6,8],[6,3],[6,3],[6,3],[6,2],[6,3],[6,4],[6,4],[6,1],[6,2],[6,1],[6,2],[6,4],[6,5],[6,1],[6,6],[6,6],[6,10],[6,11],[6,6],[6,7],[6,2],[6,2],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[45,5],[45,7],[45,8],[45,6],[56,5],[56,4],[46,6],[46,5],[46,11],[46,10],[60,7],[60,5],[60,6],[60,4],[47,12],[47,12],[47,11],[47,11],[48,5],[49,4],[40,1],[40,3],[72,2],[50,5],[50,9],[51,4],[51,8],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,6],[17,3],[17,3],[18,1],[18,4],[82,1],[82,1],[83,3],[25,4],[25,7],[25,10],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,2],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,2],[16,3],[16,4],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,4],[16,5],[16,3],[16,6],[16,7],[16,4],[16,4],[16,4],[16,4],[16,4],[16,4],[16,2],[16,2],[16,3],[16,4],[36,2],[36,3],[41,0],[41,1],[113,1],[113,2],[112,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
 return $$[$0]; 
break;
case 3:
 
          if ($$[$0-1] !== null) {
            this.$ = $$[$0-2].concat([$$[$0-1]]); 
            return this.$;
          } else {
            return $$[$0-2];
          }
        
break;
case 4:
 
          if ($$[$0] !== null) {
            this.$ = $$[$0-1].concat([$$[$0]]); 
          } else {
            this.$ = $$[$0-1];
          }
        
break;
case 5:
 this.$ = []; 
break;
case 6: case 105:
 this.$ = $$[$0-1]; 
break;
case 7:
 this.$ = null; 
break;
case 10:
 this.$ = { tipo: 'DECLARACION', id: $$[$0-4], tipoDato: $$[$0-2], valor: $$[$0], linea: _$[$0-4].first_line, columna: _$[$0-4].first_column }; 
break;
case 11:
 this.$ = { tipo: 'DECLARACION', id: $$[$0-2], tipoDato: $$[$0], valor: null, linea: _$[$0-2].first_line, columna: _$[$0-2].first_column }; 
break;
case 12:
 this.$ = { tipo: 'DECLARACION_MULTIPLE', ids: $$[$0-4], tipoDato: $$[$0-2], valores: $$[$0], linea: _$[$0-5].first_line, columna: _$[$0-5].first_column }; 
break;
case 13:
 this.$ = { tipo: 'DECLARACION_MULTIPLE', ids: $$[$0-2], tipoDato: $$[$0], valores: null, linea: _$[$0-3].first_line, columna: _$[$0-3].first_column }; 
break;
case 14:
 this.$ = { tipo: 'DECLARACION_LISTA', id: $$[$0-4], dimensiones: Number($$[$0-8]), tipoDato: $$[$0-6], valores: $$[$0-1], linea: _$[$0-11].first_line, columna: _$[$0-11].first_column }; 
break;
case 15:
 this.$ = { tipo: 'DECLARACION_LISTA', id: $$[$0], dimensiones: Number($$[$0-4]), tipoDato: $$[$0-2], valores: null, linea: _$[$0-7].first_line, columna: _$[$0-7].first_column }; 
break;
case 16:
 this.$ = { tipo: 'ASIGNACION', id: $$[$0-2], valor: $$[$0], linea: _$[$0-2].first_line, columna: _$[$0-2].first_column }; 
break;
case 17:
 this.$ = { tipo: 'ASIGNACION_MULTIPLE', ids: $$[$0-2], valores: $$[$0], linea: _$[$0-2].first_line, columna: _$[$0-2].first_column }; 
break;
case 18:
 this.$ = { tipo: 'MODIFICACION_LISTA', acceso: $$[$0-2], valor: $$[$0], linea: _$[$0-2].first_line, columna: _$[$0-2].first_column }; 
break;
case 19:
 this.$ = { tipo: 'IMPRIMIR', valor: $$[$0], conSalto: false, linea: _$[$0-1].first_line, columna: _$[$0-1].first_column }; 
break;
case 20:
 this.$ = { tipo: 'IMPRIMIR', valor: $$[$0], conSalto: true, linea: _$[$0-2].first_line, columna: _$[$0-2].first_column }; 
break;
case 21:
 this.$ = { tipo: 'INCREMENTO', id: $$[$0-1], linea: _$[$0-3].first_line, columna: _$[$0-3].first_column }; 
break;
case 22:
 this.$ = { tipo: 'DECREMENTO', id: $$[$0-1], linea: _$[$0-3].first_line, columna: _$[$0-3].first_column }; 
break;
case 23:
 this.$ = { tipo: 'CONTINUAR', linea: _$[$0].first_line, columna: _$[$0].first_column }; 
break;
case 24:
 this.$ = { tipo: 'DETENER', linea: _$[$0-1].first_line, columna: _$[$0-1].first_column }; 
break;
case 25:
 this.$ = { tipo: 'RETORNAR', valor: null, linea: _$[$0].first_line, columna: _$[$0].first_column }; 
break;
case 26:
 this.$ = { tipo: 'RETORNAR', valor: $$[$0], linea: _$[$0-1].first_line, columna: _$[$0-1].first_column }; 
break;
case 27:
 this.$ = { tipo: 'LLAMADA', id: $$[$0-2], parametros: [], linea: _$[$0-3].first_line, columna: _$[$0-3].first_column }; 
break;
case 28:
 this.$ = { tipo: 'LLAMADA', id: $$[$0-3], parametros: $$[$0-1], linea: _$[$0-4].first_line, columna: _$[$0-4].first_column }; 
break;
case 29: case 83: case 84: case 114:
 this.$ = $$[$0]; 
break;
case 30:
 this.$ = { tipo: 'DEFINICION_OBJETO', id: $$[$0-4], atributos: $$[$0-1], linea: _$[$0-5].first_line, columna: _$[$0-5].first_column }; 
break;
case 31:
 this.$ = { tipo: 'DEFINICION_METODO', objeto: $$[$0-5], id: $$[$0-2], parametros: [], instrucciones: $$[$0-1], linea: _$[$0-5].first_line, columna: _$[$0-5].first_column }; 
break;
case 32:
 this.$ = { tipo: 'DEFINICION_METODO', objeto: $$[$0-9], id: $$[$0-6], parametros: $$[$0-3], instrucciones: $$[$0-1], linea: _$[$0-9].first_line, columna: _$[$0-9].first_column }; 
break;
case 33:
 this.$ = { tipo: 'INSTANCIACION_OBJETO', tipoObjeto: $$[$0-8], id: $$[$0-7], valores: $$[$0-2], linea: _$[$0-10].first_line, columna: _$[$0-10].first_column }; 
break;
case 34:
 this.$ = { tipo: 'LLAMADA_METODO', objeto: $$[$0-4], metodo: $$[$0-2], parametros: [], linea: _$[$0-5].first_line, columna: _$[$0-5].first_column }; 
break;
case 35:
 this.$ = { tipo: 'LLAMADA_METODO', objeto: $$[$0-5], metodo: $$[$0-3], parametros: $$[$0-1], linea: _$[$0-6].first_line, columna: _$[$0-6].first_column }; 
break;
case 36:
 this.$ = { tipo: 'POST_INCREMENTO', id: $$[$0-1], linea: _$[$0-1].first_line, columna: _$[$0-1].first_column }; 
break;
case 37:
 this.$ = { tipo: 'POST_DECREMENTO', id: $$[$0-1], linea: _$[$0-1].first_line, columna: _$[$0-1].first_column }; 
break;
case 45:
 this.$ = { tipo: 'CONDICIONAL_SI', condicion: $$[$0-3], instrucciones_si: $$[$0-1], instrucciones_no: null, linea: _$[$0-4].first_line, columna: _$[$0-4].first_column }; 
break;
case 46:
 this.$ = { tipo: 'CONDICIONAL_SI', condicion: $$[$0-5], instrucciones_si: $$[$0-3], instrucciones_no: $$[$0-1], linea: _$[$0-6].first_line, columna: _$[$0-6].first_column }; 
break;
case 47:
 this.$ = { tipo: 'CONDICIONAL_SI_OSI', condicion_inicial: $$[$0-6], instrucciones_inicial: $$[$0-4], 
                 condiciones_osi: $$[$0-3].condiciones, instrucciones_osi: $$[$0-3].instrucciones, instrucciones_else: $$[$0-1], linea: _$[$0-7].first_line, columna: _$[$0-7].first_column }; 
break;
case 48:
 this.$ = { tipo: 'CONDICIONAL_SI_OSI', condicion_inicial: $$[$0-4], instrucciones_inicial: $$[$0-2], 
                 condiciones_osi: $$[$0-1].condiciones, instrucciones_osi: $$[$0-1].instrucciones, instrucciones_else: null, linea: _$[$0-5].first_line, columna: _$[$0-5].first_column }; 
break;
case 49:
 
          this.$ = { 
            condiciones: $$[$0-4].condiciones.concat([$$[$0-2]]), 
            instrucciones: $$[$0-4].instrucciones.concat([$$[$0]]) 
          }; 
        
break;
case 50:
 this.$ = { condiciones: [$$[$0-2]], instrucciones: [$$[$0]] }; 
break;
case 51:
 this.$ = { tipo: 'SELECCION_MULTIPLE', expresion: $$[$0-4], casos: $$[$0-1].casos, valores: $$[$0-1].valores, caso_contrario: null, linea: _$[$0-5].first_line, columna: _$[$0-5].first_column }; 
break;
case 52:
 this.$ = { tipo: 'SELECCION_MULTIPLE', expresion: $$[$0-3], casos: $$[$0-1].casos, valores: $$[$0-1].valores, caso_contrario: null, linea: _$[$0-4].first_line, columna: _$[$0-4].first_column }; 
break;
case 53:
 this.$ = { tipo: 'SELECCION_MULTIPLE', expresion: $$[$0-9], casos: $$[$0-6].casos, valores: $$[$0-6].valores, caso_contrario: $$[$0-3], linea: _$[$0-10].first_line, columna: _$[$0-10].first_column }; 
break;
case 54:
 this.$ = { tipo: 'SELECCION_MULTIPLE', expresion: $$[$0-8], casos: $$[$0-6].casos, valores: $$[$0-6].valores, caso_contrario: $$[$0-3], linea: _$[$0-9].first_line, columna: _$[$0-9].first_column }; 
break;
case 55:
 
          // Agregar DETENER directamente a las sentencias
          $$[$0-2].push({ tipo: 'DETENER', linea: _$[$0-1].first_line, columna: _$[$0-1].first_column });
          this.$ = { 
            casos: $$[$0-6].casos.concat([$$[$0-4]]), 
            valores: $$[$0-6].valores.concat([$$[$0-2]]) 
          }; 
        
break;
case 56:
 
          this.$ = { 
            casos: $$[$0-4].casos.concat([$$[$0-2]]), 
            valores: $$[$0-4].valores.concat([$$[$0]]) 
          }; 
        
break;
case 57:
 
          // Agregar DETENER directamente a las sentencias
          $$[$0-2].push({ tipo: 'DETENER', linea: _$[$0-1].first_line, columna: _$[$0-1].first_column });
          this.$ = { casos: [$$[$0-4]], valores: [$$[$0-2]] }; 
        
break;
case 58:
 this.$ = { casos: [$$[$0-2]], valores: [$$[$0]] }; 
break;
case 59:
 this.$ = { tipo: 'CICLO_PARA', variable: $$[$0-10], valorInicial: $$[$0-8], valorFinal: $$[$0-6], 
                 incremento: { tipo: 'INCREMENTO', id: $$[$0-4] }, instrucciones: $$[$0-1], 
                 linea: _$[$0-11].first_line, columna: _$[$0-11].first_column }; 
break;
case 60:
 this.$ = { tipo: 'CICLO_PARA', variable: $$[$0-10], valorInicial: $$[$0-8], valorFinal: $$[$0-6], 
                 incremento: { tipo: 'DECREMENTO', id: $$[$0-4] }, instrucciones: $$[$0-1], 
                 linea: _$[$0-11].first_line, columna: _$[$0-11].first_column }; 
break;
case 61:
 this.$ = { tipo: 'CICLO_PARA', variable: $$[$0-9], valorInicial: $$[$0-7], valorFinal: $$[$0-5], 
                 incremento: { tipo: 'INCREMENTO_VALOR', valor: Number($$[$0-3]) }, instrucciones: $$[$0-1], 
                 linea: _$[$0-10].first_line, columna: _$[$0-10].first_column }; 
break;
case 62:
 this.$ = { tipo: 'CICLO_PARA', variable: $$[$0-9], valorInicial: $$[$0-7], valorFinal: $$[$0-5], 
                 incremento: { tipo: 'DECREMENTO_VALOR', valor: Number($$[$0-3]) }, instrucciones: $$[$0-1], 
                 linea: _$[$0-10].first_line, columna: _$[$0-10].first_column }; 
break;
case 63:
 this.$ = { tipo: 'CICLO_MIENTRAS', condicion: $$[$0-3], instrucciones: $$[$0-1], 
                 linea: _$[$0-4].first_line, columna: _$[$0-4].first_column }; 
break;
case 64:
 this.$ = { tipo: 'CICLO_REPETIR', condicion: $$[$0], instrucciones: $$[$0-2], 
                 linea: _$[$0-3].first_line, columna: _$[$0-3].first_column }; 
break;
case 65: case 81:
 this.$ = [$$[$0]]; 
break;
case 66: case 79:
 this.$ = $$[$0-2].concat([$$[$0]]); 
break;
case 67:

          if (typeof $$[$0] === 'object' && $$[$0].tipo === 'lista') {
            this.$ = { id: $$[$0-1], tipo: 'lista', dimension: $$[$0].dimension, subtipo: $$[$0].subtipo };
          } else {
            this.$ = { id: $$[$0-1], tipo: $$[$0] };
          }
        
break;
case 68:
 this.$ = { 
            tipo: 'FUNCION', 
            id: $$[$0-3], 
            tipoRetorno: $$[$0-2], 
            parametros: [], 
            instrucciones: $$[$0-1], 
            linea: _$[$0-4].first_line, 
            columna: _$[$0-4].first_column 
          }; 
        
break;
case 69:
 this.$ = { 
            tipo: 'FUNCION', 
            id: $$[$0-7], 
            tipoRetorno: $$[$0-6], 
            parametros: $$[$0-3], 
            instrucciones: $$[$0-1], 
            linea: _$[$0-8].first_line, 
            columna: _$[$0-8].first_column 
          }; 
        
break;
case 70:
 this.$ = { 
            tipo: 'PROCEDIMIENTO', 
            id: $$[$0-2], 
            parametros: [],
            instrucciones: $$[$0-1], 
            linea: _$[$0-3].first_line, 
            columna: _$[$0-3].first_column 
          }; 
        
break;
case 71:
 this.$ = { 
            tipo: 'PROCEDIMIENTO', 
            id: $$[$0-6], 
            parametros: $$[$0-3],
            instrucciones: $$[$0-1], 
            linea: _$[$0-7].first_line, 
            columna: _$[$0-7].first_column 
          }; 
        
break;
case 72:
 this.$ = 'entero'; 
break;
case 73:
 this.$ = 'decimal'; 
break;
case 74:
 this.$ = 'booleano'; 
break;
case 75:
 this.$ = 'caracter'; 
break;
case 76:
 this.$ = 'cadena'; 
break;
case 77:
 this.$ = { tipo: 'lista', dimension: null, subtipo: null }; 
break;
case 78:
 this.$ = { tipo: 'lista', dimension: Number($$[$0-3]), subtipo: $$[$0-1] }; 
break;
case 80:
 this.$ = [$$[$0-2], $$[$0]]; 
break;
case 82:
 this.$ = $$[$0-3].concat([$$[$0]]); 
break;
case 85:
 this.$ = { tipo: 'LISTA_ANIDADA', valores: $$[$0-1], linea: _$[$0-2].first_line, columna: _$[$0-2].first_column }; 
break;
case 86:
 this.$ = { tipo: 'ACCESO_LISTA', id: $$[$0-3], indices: [$$[$0-1]], linea: _$[$0-3].first_line, columna: _$[$0-3].first_column }; 
break;
case 87:
 this.$ = { tipo: 'ACCESO_LISTA', id: $$[$0-6], indices: [$$[$0-4], $$[$0-1]], linea: _$[$0-6].first_line, columna: _$[$0-6].first_column }; 
break;
case 88:
 this.$ = { tipo: 'ACCESO_LISTA', id: $$[$0-9], indices: [$$[$0-7], $$[$0-4], $$[$0-1]], linea: _$[$0-9].first_line, columna: _$[$0-9].first_column }; 
break;
case 89:
 this.$ = { tipo: 'SUMA', izquierda: $$[$0-2], derecha: $$[$0], linea: _$[$0-1].first_line, columna: _$[$0-1].first_column }; 
break;
case 90:
 this.$ = { tipo: 'RESTA', izquierda: $$[$0-2], derecha: $$[$0], linea: _$[$0-1].first_line, columna: _$[$0-1].first_column }; 
break;
case 91:
 this.$ = { tipo: 'MULTIPLICACION', izquierda: $$[$0-2], derecha: $$[$0], linea: _$[$0-1].first_line, columna: _$[$0-1].first_column }; 
break;
case 92:
 this.$ = { tipo: 'DIVISION', izquierda: $$[$0-2], derecha: $$[$0], linea: _$[$0-1].first_line, columna: _$[$0-1].first_column }; 
break;
case 93:
 this.$ = { tipo: 'POTENCIA', izquierda: $$[$0-2], derecha: $$[$0], linea: _$[$0-1].first_line, columna: _$[$0-1].first_column }; 
break;
case 94:
 this.$ = { tipo: 'MODULO', izquierda: $$[$0-2], derecha: $$[$0], linea: _$[$0-1].first_line, columna: _$[$0-1].first_column }; 
break;
case 95:
 this.$ = { tipo: 'NEGACION', valor: $$[$0], linea: _$[$0-1].first_line, columna: _$[$0-1].first_column }; 
break;
case 96:
 this.$ = { tipo: 'IGUAL', izquierda: $$[$0-2], derecha: $$[$0], linea: _$[$0-1].first_line, columna: _$[$0-1].first_column }; 
break;
case 97:
 this.$ = { tipo: 'DIFERENTE', izquierda: $$[$0-2], derecha: $$[$0], linea: _$[$0-1].first_line, columna: _$[$0-1].first_column }; 
break;
case 98:
 this.$ = { tipo: 'MENOR_QUE', izquierda: $$[$0-2], derecha: $$[$0], linea: _$[$0-1].first_line, columna: _$[$0-1].first_column }; 
break;
case 99:
 this.$ = { tipo: 'MENOR_IGUAL', izquierda: $$[$0-2], derecha: $$[$0], linea: _$[$0-1].first_line, columna: _$[$0-1].first_column }; 
break;
case 100:
 this.$ = { tipo: 'MAYOR_QUE', izquierda: $$[$0-2], derecha: $$[$0], linea: _$[$0-1].first_line, columna: _$[$0-1].first_column }; 
break;
case 101:
 this.$ = { tipo: 'MAYOR_IGUAL', izquierda: $$[$0-2], derecha: $$[$0], linea: _$[$0-1].first_line, columna: _$[$0-1].first_column }; 
break;
case 102:
 this.$ = { tipo: 'AND', izquierda: $$[$0-2], derecha: $$[$0], linea: _$[$0-1].first_line, columna: _$[$0-1].first_column }; 
break;
case 103:
 this.$ = { tipo: 'OR', izquierda: $$[$0-2], derecha: $$[$0], linea: _$[$0-1].first_line, columna: _$[$0-1].first_column }; 
break;
case 104:
 this.$ = { tipo: 'NOT', valor: $$[$0], linea: _$[$0-1].first_line, columna: _$[$0-1].first_column }; 
break;
case 106:
 this.$ = { tipo: 'CASTEO', tipoDato: $$[$0-2], valor: $$[$0] }; 
break;
case 107:
 this.$ = { tipo: 'NUMERO', valor: Number($$[$0]), linea: _$[$0].first_line, columna: _$[$0].first_column }; 
break;
case 108:
 this.$ = { tipo: 'DECIMAL', valor: parseFloat($$[$0]), linea: _$[$0].first_line, columna: _$[$0].first_column }; 
break;
case 109:
 this.$ = { tipo: 'ID', nombre: $$[$0], linea: _$[$0].first_line, columna: _$[$0].first_column }; 
break;
case 110:
 
          // Quitar comillas
          let texto = $$[$0].slice(1, -1);
          
          // Procesar secuencias de escape
          texto = texto.replace(/\\n/g, '\n')
                       .replace(/\\t/g, '\t')
                       .replace(/\\r/g, '\r')
                       .replace(/\\"/g, '"')
                       .replace(/\\'/g, "'")
                       .replace(/\\\\/g, '\\');
                       
          this.$ = { tipo: 'CADENA', valor: texto, linea: _$[$0].first_line, columna: _$[$0].first_column }; 
        
break;
case 111:
 
          // Quitar comillas simples
          let texto2 = $$[$0].slice(1, -1);
          
          // Procesar secuencias de escape
          texto2 = texto2.replace(/\\n/g, '\n')
                       .replace(/\\t/g, '\t')
                       .replace(/\\r/g, '\r')
                       .replace(/\\"/g, '"')
                       .replace(/\\'/g, "'")
                       .replace(/\\\\/g, '\\');
                       
          this.$ = { tipo: 'CARACTER', valor: texto2, linea: _$[$0].first_line, columna: _$[$0].first_column }; 
        
break;
case 112:
 this.$ = { tipo: 'BOOLEANO', valor: true, linea: _$[$0].first_line, columna: _$[$0].first_column }; 
break;
case 113:
 this.$ = { tipo: 'BOOLEANO', valor: false, linea: _$[$0].first_line, columna: _$[$0].first_column }; 
break;
case 115:
 this.$ = { tipo: 'LLAMADA_EXPR', id: $$[$0-2], parametros: [], linea: _$[$0-3].first_line, columna: _$[$0-3].first_column }; 
break;
case 116:
 this.$ = { tipo: 'LLAMADA_EXPR', id: $$[$0-3], parametros: $$[$0-1], linea: _$[$0-4].first_line, columna: _$[$0-4].first_column }; 
break;
case 117:
 this.$ = { tipo: 'ACCESO_ATRIBUTO', objeto: $$[$0-2], atributo: $$[$0], linea: _$[$0-2].first_line, columna: _$[$0-2].first_column }; 
break;
case 118:
 this.$ = { tipo: 'LLAMADA_METODO_EXPR', objeto: $$[$0-4], metodo: $$[$0-2], parametros: [], linea: _$[$0-5].first_line, columna: _$[$0-5].first_column }; 
break;
case 119:
 this.$ = { tipo: 'LLAMADA_METODO_EXPR', objeto: $$[$0-5], metodo: $$[$0-3], parametros: $$[$0-1], linea: _$[$0-6].first_line, columna: _$[$0-6].first_column }; 
break;
case 120:
 this.$ = { tipo: 'FUNCION_NATIVA', nombre: 'minuscula', argumentos: [$$[$0-1]], linea: _$[$0-3].first_line, columna: _$[$0-3].first_column }; 
break;
case 121:
 this.$ = { tipo: 'FUNCION_NATIVA', nombre: 'mayuscula', argumentos: [$$[$0-1]], linea: _$[$0-3].first_line, columna: _$[$0-3].first_column }; 
break;
case 122:
 this.$ = { tipo: 'FUNCION_NATIVA', nombre: 'longitud', argumentos: [$$[$0-1]], linea: _$[$0-3].first_line, columna: _$[$0-3].first_column }; 
break;
case 123:
 this.$ = { tipo: 'FUNCION_NATIVA', nombre: 'truncar', argumentos: [$$[$0-1]], linea: _$[$0-3].first_line, columna: _$[$0-3].first_column }; 
break;
case 124:
 this.$ = { tipo: 'FUNCION_NATIVA', nombre: 'redondear', argumentos: [$$[$0-1]], linea: _$[$0-3].first_line, columna: _$[$0-3].first_column }; 
break;
case 125:
 this.$ = { tipo: 'FUNCION_NATIVA', nombre: 'tipo', argumentos: [$$[$0-1]], linea: _$[$0-3].first_line, columna: _$[$0-3].first_column }; 
break;
case 126:
 this.$ = { tipo: 'POST_INCREMENTO_EXPR', id: $$[$0-1], linea: _$[$0-1].first_line, columna: _$[$0-1].first_column }; 
break;
case 127:
 this.$ = { tipo: 'POST_DECREMENTO_EXPR', id: $$[$0-1], linea: _$[$0-1].first_line, columna: _$[$0-1].first_column }; 
break;
case 128:
 this.$ = { tipo: 'LLAMADA_EXPR', id: $$[$0-2], parametros: [], linea: _$[$0-2].first_line, columna: _$[$0-2].first_column }; 
break;
case 129:
 this.$ = { tipo: 'LLAMADA_EXPR', id: $$[$0-3], parametros: $$[$0-1], linea: _$[$0-3].first_line, columna: _$[$0-3].first_column }; 
break;
case 130:
 this.$ = [$$[$0-1]]; 
break;
case 131:
 this.$ = $$[$0-2].concat([$$[$0-1]]); 
break;
case 136:
 this.$ = { id: $$[$0-1], tipo: $$[$0] }; 
break;
}
},
table: [o([1,5,9,10,11,12,26,28,29,30,31,32,33,35,52,58,63,68,70,73,75],$V0,{3:1,4:2}),{1:[3]},{1:[2,2],5:[1,3],6:4,7:5,8:19,9:$V1,10:$V2,11:$V3,12:$V4,17:8,25:9,26:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:17,35:$Vc,45:20,46:21,47:22,48:23,49:24,50:25,51:26,52:$Vd,58:$Ve,63:$Vf,68:$Vg,70:$Vh,73:$Vi,75:$Vj},{1:[2,1]},{5:[1,36],8:37,9:$V1,10:$V2},o($Vk,[2,4]),{12:[1,38],17:39,19:[1,40],35:[1,41]},{22:$Vl,24:[1,42],43:[1,43],44:[1,44],84:$Vm},{22:$Vn,24:[1,47]},{24:[1,49]},{12:$Vo,16:50,20:$Vp,21:$Vq,25:62,27:[1,51],33:$Vr,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},{20:[1,70]},{20:[1,71]},o($VF,[2,23]),{8:72,9:$V1,10:$V2},o($VF,[2,25],{25:62,16:73,12:$Vo,20:$Vp,21:$Vq,33:$Vr,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE}),{12:[1,74]},o($VF,[2,29]),{12:[1,75]},o($Vk,[2,7]),o($VF,[2,38]),o($VF,[2,39]),o($VF,[2,40]),o($VF,[2,41]),o($VF,[2,42]),o($VF,[2,43]),o($VF,[2,44]),o($VG,[2,8]),o($VG,[2,9]),{12:$Vo,16:76,20:$Vp,21:$Vq,25:62,33:$Vr,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},{12:$Vo,16:77,20:$Vp,21:$Vq,25:62,33:$Vr,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},{12:[1,78]},{12:$Vo,16:79,20:$Vp,21:$Vq,25:62,33:$Vr,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},o([9,10,11,12,26,28,29,30,31,32,33,35,52,58,63,68,70,71,73,75],$V0,{4:80}),{12:[1,81]},{12:[1,82]},{1:[2,3]},o($Vk,[2,6]),{13:[1,83],22:$Vl},{13:[1,84],22:$Vn},{20:[1,85]},{12:[1,86]},{12:$Vo,16:87,20:$Vp,21:$Vq,25:62,33:$Vr,37:[1,88],87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},o($VF,[2,36]),o($VF,[2,37]),{12:[1,89]},{12:$Vo,16:90,20:$Vp,21:$Vq,25:62,33:$Vr,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},{12:$Vo,16:93,18:91,20:$VH,21:$Vq,25:62,33:$Vr,82:92,83:94,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},{12:[1,96]},{12:$Vo,16:97,20:$Vp,21:$Vq,25:62,33:$Vr,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},o($VF,[2,19],{86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV}),{12:$Vo,16:112,20:$Vp,21:$Vq,25:62,33:$Vr,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},{12:$Vo,16:113,20:$Vp,21:$Vq,25:62,33:$Vr,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},{12:$Vo,16:114,20:$Vp,21:$Vq,25:62,33:$Vr,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},{12:$Vo,14:116,16:115,19:$VW,20:$Vp,21:$Vq,25:62,33:$Vr,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},o($V01,[2,107]),o($V01,[2,108]),o($V01,[2,109],{20:[1,126],42:[1,123],43:[1,124],44:[1,125],84:$Vm}),o($V01,[2,110]),o($V01,[2,111]),o($V01,[2,112]),o($V01,[2,113]),o($V01,[2,114]),{12:[1,127]},{20:[1,128]},{20:[1,129]},{20:[1,130]},{20:[1,131]},{20:[1,132]},{20:[1,133]},{12:[1,134]},{12:[1,135]},o($VF,$V11),o($VF,[2,26],{86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV}),{20:[1,136],42:[1,137]},{20:[1,138]},{53:[1,139],86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV},{59:[1,140],86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV},{24:[1,141]},{59:[1,142],86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV},{6:144,7:5,8:19,9:$V1,10:$V2,11:$V3,12:$V4,17:8,25:9,26:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:17,35:$Vc,45:20,46:21,47:22,48:23,49:24,50:25,51:26,52:$Vd,58:$Ve,63:$Vf,68:$Vg,70:$Vh,71:[1,143],73:$Vi,75:$Vj},{14:145,19:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$},o($V21,$V0,{4:146,39:[1,147]}),{14:148,19:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$},{14:149,19:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$},{21:[1,150]},{12:[1,151]},o($VF,[2,16],{86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV}),{12:[1,152]},o($V31,[2,80]),{85:[1,153],86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV},o($VF,[2,17],{22:$V41}),o($V51,[2,81]),o($V51,$V61,{86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV}),o($V51,[2,84]),{12:$Vo,14:116,16:155,18:156,19:$VW,20:$VH,21:$Vq,25:62,33:$Vr,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:92,83:94,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},o($V31,[2,79]),o($VF,[2,18],{86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV}),{12:$Vo,16:157,20:$Vp,21:$Vq,25:62,33:$Vr,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},{12:$Vo,16:158,20:$Vp,21:$Vq,25:62,33:$Vr,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},{12:$Vo,16:159,20:$Vp,21:$Vq,25:62,33:$Vr,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},{12:$Vo,16:160,20:$Vp,21:$Vq,25:62,33:$Vr,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},{12:$Vo,16:161,20:$Vp,21:$Vq,25:62,33:$Vr,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},{12:$Vo,16:162,20:$Vp,21:$Vq,25:62,33:$Vr,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},{12:$Vo,16:163,20:$Vp,21:$Vq,25:62,33:$Vr,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},{12:$Vo,16:164,20:$Vp,21:$Vq,25:62,33:$Vr,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},{12:$Vo,16:165,20:$Vp,21:$Vq,25:62,33:$Vr,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},{12:$Vo,16:166,20:$Vp,21:$Vq,25:62,33:$Vr,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},{12:$Vo,16:167,20:$Vp,21:$Vq,25:62,33:$Vr,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},{12:$Vo,16:168,20:$Vp,21:$Vq,25:62,33:$Vr,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},{12:$Vo,16:169,20:$Vp,21:$Vq,25:62,33:$Vr,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},{12:$Vo,16:170,20:$Vp,21:$Vq,25:62,33:$Vr,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},o($VF,[2,20],{86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV}),o($V01,[2,95]),o($V71,[2,104],{86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT}),{23:[1,171],86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV},{23:[1,172]},o($V81,[2,72]),o($V81,[2,73]),o($V81,[2,74]),o($V81,[2,75]),o($V81,[2,76]),o($V81,[2,77],{20:[1,173]}),{12:[1,174]},o($V01,[2,126]),o($V01,[2,127]),{12:$Vo,16:93,18:176,20:$VH,21:$Vq,23:[1,175],25:62,33:$Vr,82:92,83:94,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},{20:[1,177],42:[1,178]},{12:$Vo,16:179,20:$Vp,21:$Vq,25:62,33:$Vr,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},{12:$Vo,16:180,20:$Vp,21:$Vq,25:62,33:$Vr,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},{12:$Vo,16:181,20:$Vp,21:$Vq,25:62,33:$Vr,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},{12:$Vo,16:182,20:$Vp,21:$Vq,25:62,33:$Vr,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},{12:$Vo,16:183,20:$Vp,21:$Vq,25:62,33:$Vr,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},{12:$Vo,16:184,20:$Vp,21:$Vq,25:62,33:$Vr,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},{23:[1,185]},{23:[1,186]},{12:$Vo,16:93,18:188,20:$VH,21:$Vq,23:[1,187],25:62,33:$Vr,82:92,83:94,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},{12:[1,189]},{9:[1,190]},o($V91,$V0,{4:191}),{8:192,9:$V1,10:$V2,60:193,62:$Va1},{12:$Vo,16:195,20:$Vp,21:$Vq,25:62,33:$Vr,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},o([9,10,11,12,26,28,29,30,31,32,33,35,52,58,63,68,69,70,73,75],$V0,{4:196}),{12:$Vo,16:197,20:$Vp,21:$Vq,25:62,33:$Vr,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},{8:37,9:$V1,10:$V2},o($Vb1,$V0,{4:198,39:[1,199]}),{6:144,7:5,8:19,9:$V1,10:$V2,11:$V3,12:$V4,17:8,25:9,26:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:17,35:$Vc,45:20,46:21,47:22,48:23,49:24,50:25,51:26,52:$Vd,58:$Ve,63:$Vf,68:$Vg,70:$Vh,73:$Vi,75:$Vj,76:[1,200]},{20:[1,201]},o($VF,[2,11],{15:[1,202]}),o($VF,[2,13],{15:[1,203]}),{22:[1,204]},{24:[1,205]},o($Vc1,$V0,{4:206,39:[1,207]}),o($Vd1,[2,86],{84:[1,208]}),o([12,20,21,33,87,100,101,102,103,104,105,106,107,108,109,110,111],$Ve1,{41:209,113:210,8:211,9:$V1,10:$V2}),o($Vf1,$V61,{86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV}),{22:$V41,23:[1,212]},o($Vg1,[2,89],{88:$VK,89:$VL,90:$VM,91:$VN}),o($Vg1,[2,90],{88:$VK,89:$VL,90:$VM,91:$VN}),o($Vh1,[2,91],{90:$VM}),o($Vh1,[2,92],{90:$VM}),o($V01,[2,93]),o($Vh1,[2,94],{90:$VM}),o($Vi1,[2,96],{86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN}),o($Vi1,[2,97],{86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN}),o($Vi1,[2,98],{86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN}),o($Vi1,[2,99],{86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN}),o($Vi1,[2,100],{86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN}),o($Vi1,[2,101],{86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN}),o($V71,[2,102],{86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT}),o([5,9,10,22,23,53,59,64,65,67,85,99],[2,103],{86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU}),o($V01,[2,105]),{12:$Vo,16:213,20:$Vp,21:$Vq,25:62,33:$Vr,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},{21:[1,214]},o($V01,[2,117]),o($V01,[2,128]),{22:$V41,23:[1,215]},{12:$Vo,16:93,18:217,20:$VH,21:$Vq,23:[1,216],25:62,33:$Vr,82:92,83:94,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},{12:[1,218]},{23:[1,219],86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV},{23:[1,220],86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV},{23:[1,221],86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV},{23:[1,222],86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV},{23:[1,223],86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV},{23:[1,224],86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV},o($VF,[2,21]),o($VF,[2,22]),o($VF,[2,27]),{22:$V41,23:[1,225]},{20:[1,226]},{12:$Vj1,36:227,112:228},{6:144,7:5,8:19,9:$V1,10:$V2,11:$V3,12:$V4,17:8,25:9,26:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:17,35:$Vc,45:20,46:21,47:22,48:23,49:24,50:25,51:26,52:$Vd,54:[1,230],55:[1,231],56:232,57:[1,233],58:$Ve,63:$Vf,68:$Vg,70:$Vh,73:$Vi,75:$Vj},{60:234,62:$Va1},{55:[1,236],61:[1,235],62:$Vk1},{12:$Vo,16:238,20:$Vp,21:$Vq,25:62,33:$Vr,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},{64:[1,239],86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV},{6:144,7:5,8:19,9:$V1,10:$V2,11:$V3,12:$V4,17:8,25:9,26:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:17,35:$Vc,45:20,46:21,47:22,48:23,49:24,50:25,51:26,52:$Vd,58:$Ve,63:$Vf,68:$Vg,69:[1,240],70:$Vh,73:$Vi,75:$Vj},o($VF,[2,64],{86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV}),{6:144,7:5,8:19,9:$V1,10:$V2,11:$V3,12:$V4,17:8,25:9,26:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:17,35:$Vc,45:20,46:21,47:22,48:23,49:24,50:25,51:26,52:$Vd,58:$Ve,63:$Vf,68:$Vg,70:$Vh,73:$Vi,74:[1,241],75:$Vj},{20:[1,242]},o($VF,[2,70]),{12:$Vl1,40:243,72:244},{12:$Vo,16:246,20:$Vp,21:$Vq,25:62,33:$Vr,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},{12:$Vo,16:93,18:247,20:$VH,21:$Vq,25:62,33:$Vr,82:92,83:94,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},{14:248,19:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$},{12:[1,249]},{6:144,7:5,8:19,9:$V1,10:$V2,11:$V3,12:$V4,17:8,25:9,26:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:17,35:$Vc,38:[1,250],45:20,46:21,47:22,48:23,49:24,50:25,51:26,52:$Vd,58:$Ve,63:$Vf,68:$Vg,70:$Vh,73:$Vi,75:$Vj},{20:[1,251]},{12:$Vo,16:252,20:$Vp,21:$Vq,25:62,33:$Vr,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},{12:$Vo,16:93,20:$VH,21:$Vq,25:62,33:$Vr,82:253,83:94,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},o([12,20,21,23,33,87,100,101,102,103,104,105,106,107,108,109,110,111],[2,133],{8:254,9:$V1,10:$V2}),o($Vm1,[2,134]),o($V51,[2,85]),o($V01,[2,106]),{22:[1,255]},o($V01,[2,129]),o($V01,[2,115]),{22:$V41,23:[1,256]},{20:[1,257]},o($V01,[2,120]),o($V01,[2,121]),o($V01,[2,122]),o($V01,[2,123]),o($V01,[2,124]),o($V01,[2,125]),o($VF,[2,28]),{12:$Vo,16:93,18:259,20:$VH,21:$Vq,23:[1,258],25:62,33:$Vr,82:92,83:94,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},{12:$Vj1,23:[1,260],112:261},o($Vn1,$Ve1,{113:210,8:211,41:262,9:$V1,10:$V2}),{14:263,19:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$},o($VF,[2,45]),o($Vo1,$V0,{4:264}),{54:[1,266],55:[1,265],57:[1,267]},{12:$Vo,16:268,20:$Vp,21:$Vq,25:62,33:$Vr,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},{55:[1,270],61:[1,269],62:$Vk1},o($VF,[2,52]),{53:[1,271]},{12:$Vo,16:272,20:$Vp,21:$Vq,25:62,33:$Vr,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},{53:[1,273],86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV},{12:$Vo,16:274,20:$Vp,21:$Vq,25:62,33:$Vr,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},o($VF,[2,63]),o($VF,[2,68]),{12:$Vl1,40:275,72:244},{22:$Vp1,23:[1,276]},o($Vf1,[2,65]),{14:278,19:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$},o($VF,[2,10],{86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV}),o($VF,[2,12],{22:$V41}),{23:[1,279]},{20:[1,280]},o($VF,[2,31]),{12:$Vl1,40:281,72:244},{85:[1,282],86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV},o($V51,[2,82]),o($Vm1,[2,135]),{14:283,19:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$},o($V01,[2,116]),{12:$Vo,16:93,18:285,20:$VH,21:$Vq,23:[1,284],25:62,33:$Vr,82:92,83:94,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},o($VF,[2,34]),{22:$V41,23:[1,286]},o($VF,[2,30]),o($Vn1,$Ve1,{113:210,8:211,41:287,9:$V1,10:$V2}),o($Vn1,[2,130]),o([9,10,12,23],[2,136]),{6:144,7:5,8:19,9:$V1,10:$V2,11:$V3,12:$V4,17:8,25:9,26:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:17,35:$Vc,45:20,46:21,47:22,48:23,49:24,50:25,51:26,52:$Vd,54:[1,288],58:$Ve,63:$Vf,68:$Vg,70:$Vh,73:$Vi,75:$Vj},o($Vo1,$V0,{4:289}),o($VF,[2,48]),{12:$Vo,16:290,20:$Vp,21:$Vq,25:62,33:$Vr,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},{53:[1,291],86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV},o($VF,[2,51]),{53:[1,292]},o($Vq1,$V0,{4:293}),{53:[1,294],86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV},o($Vr1,$V0,{4:295}),{65:[1,296],67:[1,297],86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV},{22:$Vp1,23:[1,298]},o($V21,$V0,{4:299}),{12:$Vl1,72:300},o($Vf1,[2,67]),{12:[1,301]},{9:[1,302]},{22:$Vp1,23:[1,303]},o($Vd1,[2,87],{84:[1,304]}),{23:[1,305]},o($V01,[2,118]),{22:$V41,23:[1,306]},o($VF,[2,35]),o($Vn1,[2,131]),o($VF,[2,46]),{6:144,7:5,8:19,9:$V1,10:$V2,11:$V3,12:$V4,17:8,25:9,26:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:17,35:$Vc,45:20,46:21,47:22,48:23,49:24,50:25,51:26,52:$Vd,54:[1,307],58:$Ve,63:$Vf,68:$Vg,70:$Vh,73:$Vi,75:$Vj},{53:[1,308],86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV},o($V91,$V0,{4:309}),o($Vq1,$V0,{4:310}),{6:144,7:5,8:19,9:$V1,10:$V2,11:$V3,12:$V4,17:8,25:9,26:$V5,28:$V6,29:$V7,30:$V8,31:[1,311],32:$Va,33:$Vb,34:17,35:$Vc,45:20,46:21,47:22,48:23,49:24,50:25,51:26,52:$Vd,58:$Ve,63:$Vf,68:$Vg,70:$Vh,73:$Vi,75:$Vj},o($Vr1,$V0,{4:312}),o($Vs1,[2,58],{7:5,17:8,25:9,34:17,8:19,45:20,46:21,47:22,48:23,49:24,50:25,51:26,6:144,9:$V1,10:$V2,11:$V3,12:$V4,26:$V5,28:$V6,29:$V7,30:$V8,31:[1,313],32:$Va,33:$Vb,35:$Vc,52:$Vd,58:$Ve,63:$Vf,68:$Vg,70:$Vh,73:$Vi,75:$Vj}),{12:[1,314],21:[1,315]},{12:[1,316],21:[1,317]},o($Vb1,$V0,{4:318}),{6:144,7:5,8:19,9:$V1,10:$V2,11:$V3,12:$V4,17:8,25:9,26:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:17,35:$Vc,45:20,46:21,47:22,48:23,49:24,50:25,51:26,52:$Vd,58:$Ve,63:$Vf,68:$Vg,70:$Vh,73:$Vi,75:$Vj,76:[1,319]},o($Vf1,[2,66]),o($VF,[2,15],{24:[1,320]}),{12:$Vo,16:93,18:321,20:$VH,21:$Vq,25:62,33:$Vr,82:92,83:94,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},o($Vc1,$V0,{4:322}),{12:$Vo,16:323,20:$Vp,21:$Vq,25:62,33:$Vr,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},o($V81,[2,78]),o($V01,[2,119]),o($VF,[2,47]),o($V91,$V0,{4:324}),o($Vt1,[2,50],{7:5,17:8,25:9,34:17,8:19,45:20,46:21,47:22,48:23,49:24,50:25,51:26,6:144,9:$V1,10:$V2,11:$V3,12:$V4,26:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,35:$Vc,52:$Vd,58:$Ve,63:$Vf,68:$Vg,70:$Vh,73:$Vi,75:$Vj}),{6:144,7:5,8:19,9:$V1,10:$V2,11:$V3,12:$V4,17:8,25:9,26:$V5,28:$V6,29:$V7,30:$V8,31:[1,325],32:$Va,33:$Vb,34:17,35:$Vc,45:20,46:21,47:22,48:23,49:24,50:25,51:26,52:$Vd,58:$Ve,63:$Vf,68:$Vg,70:$Vh,73:$Vi,75:$Vj},{8:326,9:$V1,10:$V2},o($Vs1,[2,56],{7:5,17:8,25:9,34:17,8:19,45:20,46:21,47:22,48:23,49:24,50:25,51:26,6:144,9:$V1,10:$V2,11:$V3,12:$V4,26:$V5,28:$V6,29:$V7,30:$V8,31:[1,327],32:$Va,33:$Vb,35:$Vc,52:$Vd,58:$Ve,63:$Vf,68:$Vg,70:$Vh,73:$Vi,75:$Vj}),{8:328,9:$V1,10:$V2},{43:[1,329]},{59:[1,330]},{44:[1,331]},{59:[1,332]},{6:144,7:5,8:19,9:$V1,10:$V2,11:$V3,12:$V4,17:8,25:9,26:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:17,35:$Vc,45:20,46:21,47:22,48:23,49:24,50:25,51:26,52:$Vd,58:$Ve,63:$Vf,68:$Vg,70:$Vh,73:$Vi,74:[1,333],75:$Vj},o($VF,[2,71]),{20:[1,334]},{8:211,9:$V1,10:$V2,22:$V41,23:$Ve1,41:335,113:210},{6:144,7:5,8:19,9:$V1,10:$V2,11:$V3,12:$V4,17:8,25:9,26:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:17,35:$Vc,38:[1,336],45:20,46:21,47:22,48:23,49:24,50:25,51:26,52:$Vd,58:$Ve,63:$Vf,68:$Vg,70:$Vh,73:$Vi,75:$Vj},{85:[1,337],86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV},o($Vt1,[2,49],{7:5,17:8,25:9,34:17,8:19,45:20,46:21,47:22,48:23,49:24,50:25,51:26,6:144,9:$V1,10:$V2,11:$V3,12:$V4,26:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,35:$Vc,52:$Vd,58:$Ve,63:$Vf,68:$Vg,70:$Vh,73:$Vi,75:$Vj}),{8:338,9:$V1,10:$V2},o($Vu1,$V11,{61:[1,339]}),{8:340,9:$V1,10:$V2},o($Vs1,[2,57],{9:$V11,10:$V11}),{59:[1,341]},o($Vv1,$V0,{4:342}),{59:[1,343]},o($Vv1,$V0,{4:344}),o($VF,[2,69]),{12:$Vo,16:93,18:345,20:$VH,21:$Vq,25:62,33:$Vr,82:92,83:94,87:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},{23:[1,346]},o($VF,[2,32]),o($Vd1,[2,88]),o($Vu1,$V11,{61:[1,347]}),o($VF,[2,54]),o($Vs1,[2,55],{9:$V11,10:$V11}),o($Vv1,$V0,{4:348}),{6:144,7:5,8:19,9:$V1,10:$V2,11:$V3,12:$V4,17:8,25:9,26:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:17,35:$Vc,45:20,46:21,47:22,48:23,49:24,50:25,51:26,52:$Vd,58:$Ve,63:$Vf,66:[1,349],68:$Vg,70:$Vh,73:$Vi,75:$Vj},o($Vv1,$V0,{4:350}),{6:144,7:5,8:19,9:$V1,10:$V2,11:$V3,12:$V4,17:8,25:9,26:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:17,35:$Vc,45:20,46:21,47:22,48:23,49:24,50:25,51:26,52:$Vd,58:$Ve,63:$Vf,66:[1,351],68:$Vg,70:$Vh,73:$Vi,75:$Vj},{22:$V41,23:[1,352]},o($VF,[2,33]),o($VF,[2,53]),{6:144,7:5,8:19,9:$V1,10:$V2,11:$V3,12:$V4,17:8,25:9,26:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:17,35:$Vc,45:20,46:21,47:22,48:23,49:24,50:25,51:26,52:$Vd,58:$Ve,63:$Vf,66:[1,353],68:$Vg,70:$Vh,73:$Vi,75:$Vj},o($VF,[2,61]),{6:144,7:5,8:19,9:$V1,10:$V2,11:$V3,12:$V4,17:8,25:9,26:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:17,35:$Vc,45:20,46:21,47:22,48:23,49:24,50:25,51:26,52:$Vd,58:$Ve,63:$Vf,66:[1,354],68:$Vg,70:$Vh,73:$Vi,75:$Vj},o($VF,[2,62]),o($VF,[2,14]),o($VF,[2,59]),o($VF,[2,60])],
defaultActions: {3:[2,1],36:[2,3]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip horizontal whitespace */
break;
case 1: /* comentario de una línea, se descarta */ 
break;
case 2: /* comentario multilínea, se descarta */ 
break;
case 3:return 9;
break;
case 4:return 10;
break;
case 5:return 97;
break;
case 6:return 95;
break;
case 7:return 92;
break;
case 8:return 93;
break;
case 9:return 96;
break;
case 10:return 94;
break;
case 11:return 42;
break;
case 12:return 15;
break;
case 13:return 62;
break;
case 14:return 57;
break;
case 15:return 55;
break;
case 16:return 54;
break;
case 17:return 61;
break;
case 18:return 65;
break;
case 19:return 67;
break;
case 20:return 66;
break;
case 21:return 69;
break;
case 22:return 71;
break;
case 23:return 38;
break;
case 24:return 11;
break;
case 25:return 13;
break;
case 26:return 77;
break;
case 27:return 77;
break;
case 28:return 78;
break;
case 29:return 78;
break;
case 30:return 79;
break;
case 31:return 79;
break;
case 32:return 80;
break;
case 33:return 80;
break;
case 34:return 81;
break;
case 35:return 81;
break;
case 36:return 19;
break;
case 37:return 19;
break;
case 38:return 24;
break;
case 39:return 24;
break;
case 40:return 26;
break;
case 41:return 26;
break;
case 42:return 28;
break;
case 43:return 29;
break;
case 44:return 28;
break;
case 45:return 29;
break;
case 46:return 27;
break;
case 47:return 106;
break;
case 48:return 106;
break;
case 49:return 107;
break;
case 50:return 107;
break;
case 51:return 108;
break;
case 52:return 108;
break;
case 53:return 109;
break;
case 54:return 109;
break;
case 55:return 110;
break;
case 56:return 110;
break;
case 57:return 111;
break;
case 58:return 111;
break;
case 59:return 104;
break;
case 60:return 105;
break;
case 61:return 104;
break;
case 62:return 105;
break;
case 63:return 104;
break;
case 64:return 105;
break;
case 65:return 104;
break;
case 66:return 105;
break;
case 67:return 52;
break;
case 68:return 52;
break;
case 69:return 53;
break;
case 70:return 53;
break;
case 71:return 58;
break;
case 72:return 58;
break;
case 73:return 59;
break;
case 74:return 59;
break;
case 75:return 31;
break;
case 76:return 31;
break;
case 77:return 30;
break;
case 78:return 30;
break;
case 79:return 35;
break;
case 80:return 35;
break;
case 81:return 37;
break;
case 82:return 37;
break;
case 83:return 32;
break;
case 84:return 73;
break;
case 85:return 32;
break;
case 86:return 73;
break;
case 87:return 74;
break;
case 88:return 75;
break;
case 89:return 76;
break;
case 90:return 33;
break;
case 91:return 33;
break;
case 92:return 39;
break;
case 93:return 99;
break;
case 94:return 98;
break;
case 95:return 100;
break;
case 96:return 64;
break;
case 97:return 64;
break;
case 98:return 63;
break;
case 99:return 63;
break;
case 100:return 68;
break;
case 101:return 68;
break;
case 102:return 70;
break;
case 103:return 70;
break;
case 104:return 43;
break;
case 105:return 44;
break;
case 106:return 86;
break;
case 107:return 87;
break;
case 108:return 101;
break;
case 109:return 21;
break;
case 110:return 102;
break;
case 111:return 103;
break;
case 112:return 12;
break;
case 113:return 90;
break;
case 114:return 91;
break;
case 115:return 88;
break;
case 116:return 89;
break;
case 117:return 22;
break;
case 118:return 20;
break;
case 119:return 23;
break;
case 120:return 84;
break;
case 121:return 85;
break;
case 122:return '=';
break;
case 123:return 5;
break;
case 124:
    console.error(`Carácter no reconocido: '${yy_.yytext}'`);
    return 'INVALIDO';

break;
}
},
rules: [/^(?:[ \t\r]+)/,/^(?:\/\/[^\n]*)/,/^(?:\/\*([^*]|\*+[^*/])*\*+\/)/,/^(?:\n)/,/^(?:;)/,/^(?:>=)/,/^(?:<=)/,/^(?:==)/,/^(?:!=)/,/^(?:>)/,/^(?:<)/,/^(?:\.)/,/^(?:con valor\b)/,/^(?:en caso de ser\b)/,/^(?:o si\b)/,/^(?:de lo contrario\b)/,/^(?:fin si\b)/,/^(?:fin segun\b)/,/^(?:con incremento\b)/,/^(?:con decremento\b)/,/^(?:fin para\b)/,/^(?:fin mientras\b)/,/^(?:hasta que\b)/,/^(?:fin metodo\b)/,/^(?:ingresar\b)/,/^(?:como\b)/,/^(?:entero\b)/,/^(?:Entero\b)/,/^(?:decimal\b)/,/^(?:Decimal\b)/,/^(?:booleano\b)/,/^(?:Booleano\b)/,/^(?:caracter\b)/,/^(?:Caracter\b)/,/^(?:cadena\b)/,/^(?:Cadena\b)/,/^(?:Lista\b)/,/^(?:lista\b)/,/^(?:->)/,/^(?:=)/,/^(?:imprimir\b)/,/^(?:Imprimir\b)/,/^(?:inc\b)/,/^(?:dec\b)/,/^(?:Inc\b)/,/^(?:Dec\b)/,/^(?:nl\b)/,/^(?:minuscula\b)/,/^(?:Minuscula\b)/,/^(?:mayuscula\b)/,/^(?:Mayuscula\b)/,/^(?:longitud\b)/,/^(?:Longitud\b)/,/^(?:truncar\b)/,/^(?:Truncar\b)/,/^(?:redondear\b)/,/^(?:Redondear\b)/,/^(?:tipo\b)/,/^(?:Tipo\b)/,/^(?:Verdadero\b)/,/^(?:Falso\b)/,/^(?:verdadero\b)/,/^(?:falso\b)/,/^(?:True\b)/,/^(?:False\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:si\b)/,/^(?:Si\b)/,/^(?:entonces\b)/,/^(?:Entonces\b)/,/^(?:segun\b)/,/^(?:Segun\b)/,/^(?:hacer\b)/,/^(?:Hacer\b)/,/^(?:detener\b)/,/^(?:Detener\b)/,/^(?:continuar\b)/,/^(?:Continuar\b)/,/^(?:objeto\b)/,/^(?:Objeto\b)/,/^(?:metodo\b)/,/^(?:Metodo\b)/,/^(?:retornar\b)/,/^(?:funcion\b)/,/^(?:Retornar\b)/,/^(?:Funcion\b)/,/^(?:fin funcion\b)/,/^(?:procedimiento\b)/,/^(?:fin procedimiento\b)/,/^(?:ejecutar\b)/,/^(?:Ejecutar\b)/,/^(?:con parametros\b)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:hasta\b)/,/^(?:Hasta\b)/,/^(?:para\b)/,/^(?:Para\b)/,/^(?:mientras\b)/,/^(?:Mientras\b)/,/^(?:repetir\b)/,/^(?:Repetir\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:"([^"\\]|\\["nlt\\'])*")/,/^(?:'([^\'\\]|\\[\'nlt\\])')/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:\^)/,/^(?:%)/,/^(?:\*)/,/^(?:\/)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:=)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}