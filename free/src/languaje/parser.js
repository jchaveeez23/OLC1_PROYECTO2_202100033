/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,26],$V1=[1,31],$V2=[1,28],$V3=[1,27],$V4=[1,29],$V5=[1,30],$V6=[1,25],$V7=[1,24],$V8=[1,20],$V9=[1,19],$Va=[1,32],$Vb=[1,33],$Vc=[5,21,22,27,28,30,31,32,33,34,37,40,44,45,47,48,72,98,99],$Vd=[1,43],$Ve=[1,50],$Vf=[1,45],$Vg=[1,44],$Vh=[1,46],$Vi=[1,47],$Vj=[1,48],$Vk=[1,49],$Vl=[1,57],$Vm=[1,59],$Vn=[1,62],$Vo=[2,23],$Vp=[2,51],$Vq=[1,70],$Vr=[1,68],$Vs=[1,69],$Vt=[1,73],$Vu=[1,74],$Vv=[5,21,22,25,26,27,28,29,30,31,32,33,34,37,40,41,44,45,47,48,58,59,71,72,74,75,98,99],$Vw=[1,75],$Vx=[1,76],$Vy=[1,77],$Vz=[1,78],$VA=[5,21,22,25,26,27,28,29,30,31,32,33,34,37,40,41,44,45,47,48,58,59,71,72,74,75,77,78,79,80,98,99],$VB=[1,79],$VC=[1,80],$VD=[5,21,22,25,26,27,28,29,30,31,32,33,34,37,40,41,44,45,47,48,58,59,71,72,74,75,77,78,79,80,82,83,98,99],$VE=[1,81],$VF=[1,82],$VG=[5,21,22,25,26,27,28,29,30,31,32,33,34,37,40,41,44,45,47,48,58,59,71,72,74,75,77,78,79,80,82,83,85,86,98,99],$VH=[1,83],$VI=[1,84],$VJ=[1,85],$VK=[5,21,22,25,26,27,28,29,30,31,32,33,34,37,40,41,44,45,47,48,58,59,71,72,74,75,77,78,79,80,82,83,85,86,88,89,90,98,99],$VL=[5,21,22,25,26,27,28,29,30,31,32,33,34,37,40,41,44,45,47,48,58,59,71,72,74,75,77,78,79,80,82,83,85,86,88,89,90,92,98,99],$VM=[1,88],$VN=[1,89],$VO=[1,90],$VP=[1,91],$VQ=[1,92],$VR=[23,50,58],$VS=[5,21,22,27,28,30,31,32,33,34,37,40,44,45,47,48,52,59,72,98,99],$VT=[1,130],$VU=[1,135],$VV=[39,40,43],$VW=[5,21,22,23,25,26,27,28,29,30,31,32,33,34,37,40,41,44,45,47,48,58,59,71,72,74,75,77,78,79,80,82,83,85,86,88,89,90,92,98,99],$VX=[5,21,22,27,28,30,31,32,33,34,37,40,44,45,47,48,58,72,98,99],$VY=[40,45,47],$VZ=[21,22,27,30,33,34,37,44,48,72,98,99],$V_=[2,31],$V$=[1,207],$V01=[58,59];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"expressions":3,"instructionList":4,"EOF":5,"instruction":6,"printStatement":7,"variableDeclaration":8,"variableAssignment":9,"ifStatement":10,"switchStatement":11,"forStatement":12,"whileStatement":13,"doUntilStatement":14,"breakStatement":15,"continueStatement":16,"increment":17,"decrement":18,"incrementShort":19,"decrementShort":20,"FOR":21,"ID":22,"ARROW":23,"logical":24,"UNTIL":25,"WITH_INCREMENT":26,"DO":27,"ENDFOR":28,"WITH_DECREMENT":29,"WHILE":30,"ENDWHILE":31,"UNTIL_COND":32,"BREAK":33,"CONTINUE":34,"returnStatement":35,"RETURN":36,"SWITCH":37,"caseList":38,"ENDSWITCH":39,"ELSE":40,"THEN":41,"singleCase":42,"CASE":43,"IF":44,"ENDIF":45,"elseIfList":46,"ELSEIF":47,"ENTER":48,"variable_id":49,"AS":50,"dataType":51,"WITHVALUE":52,"variable_list":53,"expression_list":54,"LIST":55,"LEFTPAREN":56,"DIGITS":57,"COMMA":58,"RIGHTPAREN":59,"listValues":60,"listAccess":61,"INTEGER":62,"DECIMAL":63,"STRING":64,"CHARACTER":65,"BOOLEAN":66,"listElements":67,"singleElement":68,"nestedElement":69,"LEFTBRACKET":70,"RIGHTBRACKET":71,"PRINT":72,"comparison":73,"AND":74,"OR":75,"equality":76,"LESSTHAN":77,"GREATERTHAN":78,"LESSEQUAL":79,"GREATEREQUAL":80,"term":81,"EQUALEQUAL":82,"NOTEQUAL":83,"termLow":84,"PLUS":85,"MINUS":86,"power":87,"MULTIPLY":88,"DIVIDE":89,"MOD":90,"factor":91,"POWER":92,"FLOAT":93,"VARCHAR":94,"CHAR":95,"TRUE":96,"FALSE":97,"INC":98,"DEC":99,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",21:"FOR",22:"ID",23:"ARROW",25:"UNTIL",26:"WITH_INCREMENT",27:"DO",28:"ENDFOR",29:"WITH_DECREMENT",30:"WHILE",31:"ENDWHILE",32:"UNTIL_COND",33:"BREAK",34:"CONTINUE",36:"RETURN",37:"SWITCH",39:"ENDSWITCH",40:"ELSE",41:"THEN",43:"CASE",44:"IF",45:"ENDIF",47:"ELSEIF",48:"ENTER",50:"AS",52:"WITHVALUE",55:"LIST",56:"LEFTPAREN",57:"DIGITS",58:"COMMA",59:"RIGHTPAREN",62:"INTEGER",63:"DECIMAL",64:"STRING",65:"CHARACTER",66:"BOOLEAN",70:"LEFTBRACKET",71:"RIGHTBRACKET",72:"PRINT",74:"AND",75:"OR",77:"LESSTHAN",78:"GREATERTHAN",79:"LESSEQUAL",80:"GREATEREQUAL",82:"EQUALEQUAL",83:"NOTEQUAL",85:"PLUS",86:"MINUS",88:"MULTIPLY",89:"DIVIDE",90:"MOD",92:"POWER",93:"FLOAT",94:"VARCHAR",95:"CHAR",96:"TRUE",97:"FALSE",98:"INC",99:"DEC"},
productions_: [0,[3,2],[3,1],[4,1],[4,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[12,11],[12,11],[13,5],[14,4],[15,1],[16,1],[35,1],[35,2],[11,5],[11,9],[38,1],[38,2],[42,5],[10,5],[10,7],[10,6],[10,8],[46,4],[46,5],[8,4],[8,6],[8,4],[8,6],[8,12],[8,8],[9,3],[9,3],[9,3],[53,3],[53,3],[54,3],[54,3],[49,1],[51,1],[51,1],[51,1],[51,1],[51,1],[60,1],[67,1],[67,3],[67,1],[67,3],[68,1],[69,3],[61,4],[61,7],[61,10],[7,2],[24,1],[24,3],[24,3],[73,1],[73,3],[73,3],[73,3],[73,3],[76,1],[76,3],[76,3],[81,1],[81,3],[81,3],[84,1],[84,3],[84,3],[84,3],[87,1],[87,3],[91,1],[91,1],[91,1],[91,1],[91,1],[91,1],[91,1],[91,4],[91,1],[91,1],[91,1],[19,4],[20,4],[17,3],[18,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new ProgramNode($$[$0-1]); 
break;
case 2:
 return new ProgramNode([]); 
break;
case 3:
 this.$ = [ $$[$0] ]; 
break;
case 4: case 30:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 51: case 62: case 68: case 71: case 76: case 79: case 82: case 86:
 this.$ = $$[$0]; 
break;
case 19:
 this.$ = new ForNode($$[$0-9], $$[$0-7], $$[$0-5], $$[$0-3], false, $$[$0-1]); 
break;
case 20:
 this.$ = new ForNode($$[$0-9], $$[$0-7], $$[$0-5], $$[$0-3], true, $$[$0-1]); 
break;
case 21:
 this.$ = new WhileNode($$[$0-3], $$[$0-1]); 
break;
case 22:
 this.$ = new DoUntilNode($$[$0], $$[$0-2]); 
break;
case 23:
 this.$ = new BreakNode(); 
break;
case 24:
 this.$ = new ContinueNode(); 
break;
case 25:
 this.$ = new ReturnNode(); 
break;
case 26:
 this.$ = new ReturnNode($$[$0]); 
break;
case 27:
 this.$ = new SwitchNode($$[$0-3], $$[$0-1], null); 
break;
case 28:
 this.$ = new SwitchNode($$[$0-7], $$[$0-5], $$[$0-3]); 
break;
case 29: case 58: case 60:
 this.$ = [$$[$0]]; 
break;
case 31:
 this.$ = { value: $$[$0-3], body: $$[$0-1] }; 
break;
case 32:
 this.$ = new IfNode($$[$0-3], $$[$0-1], [], []); 
break;
case 33:
 this.$ = new IfNode($$[$0-5], $$[$0-3], [], $$[$0-1]); 
break;
case 34:
 this.$ = new IfNode($$[$0-4], $$[$0-2], $$[$0-1], []); 
break;
case 35:
 this.$ = new IfNode($$[$0-6], $$[$0-4], $$[$0-3], $$[$0-1]); 
break;
case 36:
 this.$ = [{ condition: $$[$0-2], body: $$[$0] }]; 
break;
case 37:
 $$[$0-4].push({ condition: $$[$0-2], body: $$[$0] }); this.$ = $$[$0-4]; 
break;
case 38: case 40:
 this.$ = new VariableDeclarationNode($$[$0-2], $$[$0]); 
break;
case 39: case 41:
 this.$ = new VariableDeclarationNode($$[$0-4], $$[$0-2], $$[$0]); 
break;
case 42:
 this.$ = new ListDeclarationNode(Number($$[$0-8]), $$[$0-6], $$[$0-4], $$[$0-1]); 
break;
case 43:
 this.$ = new ListDeclarationNode(Number($$[$0-4]), $$[$0-2], $$[$0]); 
break;
case 44: case 46:
 this.$ = new VariableAssignmentNode($$[$0-2], $$[$0]); 
break;
case 45:
 this.$ = new ListAssignmentNode($$[$0-2].name, $$[$0-2].indices, $$[$0]); 
break;
case 47: case 49:
 this.$ = [$$[$0-2], $$[$0]]; 
break;
case 48: case 50:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 52:
 this.$ = 'entero'; 
break;
case 53:
 this.$ = 'decimal'; 
break;
case 54:
 this.$ = 'cadena'; 
break;
case 55:
 this.$ = 'caracter'; 
break;
case 56:
 this.$ = 'booleano'; 
break;
case 57:
 this.$ = new ListValueNode($$[$0]); 
break;
case 59: case 61:
 this.$ = [$$[$0-2], ...$$[$0]]; 
break;
case 63:
 this.$ = $$[$0-1]; 
break;
case 64:
 this.$ = { name: $$[$0-3], indices: [$$[$0-1]] }; 
break;
case 65:
 this.$ = { name: $$[$0-6], indices: [$$[$0-4], $$[$0-1]] }; 
break;
case 66:
 this.$ = { name: $$[$0-9], indices: [$$[$0-7], $$[$0-4], $$[$0-1]] }; 
break;
case 67:
 this.$ = new PrintNode($$[$0]); 
break;
case 69:
 this.$ = new AndNode($$[$0-2], $$[$0]); 
break;
case 70:
 this.$ = new OrNode($$[$0-2], $$[$0]); 
break;
case 72:
 this.$ = new LessNode($$[$0-2], $$[$0]); 
break;
case 73:
 this.$ = new GreaterNode($$[$0-2], $$[$0]); 
break;
case 74:
 this.$ = new LessEqualNode($$[$0-2], $$[$0]); 
break;
case 75:
 this.$ = new GreaterEqualNode($$[$0-2], $$[$0]); 
break;
case 77:
 this.$ = new EqualNode($$[$0-2], $$[$0]); 
break;
case 78:
 this.$ = new NotEqualNode($$[$0-2], $$[$0]); 
break;
case 80:
 this.$ = new AddNode($$[$0-2], $$[$0]); 
break;
case 81:
 this.$ = new SubNode($$[$0-2], $$[$0]); 
break;
case 83:
 this.$ = new MulNode($$[$0-2], $$[$0]); 
break;
case 84:
 this.$ = new DivNode($$[$0-2], $$[$0]); 
break;
case 85:
 this.$ = new ModNode($$[$0-2], $$[$0]); 
break;
case 87:
 this.$ = new PowNode($$[$0-2], $$[$0]); 
break;
case 88:
 this.$ = new IdentifierNode($$[$0]); 
break;
case 89: case 90:
 this.$ = new NumberLiteralNode(Number($$[$0])); 
break;
case 91:
 this.$ = new StringLiteralNode($$[$0].slice(1, -1)); 
break;
case 92:
 this.$ = new CharacterLiteralNode($$[$0].slice(1, -1)); 
break;
case 93:
 this.$ = new BooleanLiteralNode(true); 
break;
case 94:
 this.$ = new BooleanLiteralNode(false); 
break;
case 95:
 this.$ = new CastNode($$[$0-2], $$[$0]); 
break;
case 98:
 this.$ = new ListAccessNode($$[$0].name, $$[$0].indices); 
break;
case 99:
 this.$ = new IncrementNode($$[$0-1]); 
break;
case 100:
 this.$ = new DecrementNode($$[$0-1]); 
break;
case 101:
 this.$ = new IncrementNode(new IdentifierNode($$[$0-2])); 
break;
case 102:
 this.$ = new DecrementNode(new IdentifierNode($$[$0-2])); 
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:$V0,22:$V1,27:$V2,30:$V3,33:$V4,34:$V5,37:$V6,44:$V7,48:$V8,49:21,53:23,61:22,72:$V9,98:$Va,99:$Vb},{1:[3]},{5:[1,34],6:35,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:$V0,22:$V1,27:$V2,30:$V3,33:$V4,34:$V5,37:$V6,44:$V7,48:$V8,49:21,53:23,61:22,72:$V9,98:$Va,99:$Vb},{1:[2,2]},o($Vc,[2,3]),o($Vc,[2,5]),o($Vc,[2,6]),o($Vc,[2,7]),o($Vc,[2,8]),o($Vc,[2,9]),o($Vc,[2,10]),o($Vc,[2,11]),o($Vc,[2,12]),o($Vc,[2,13]),o($Vc,[2,14]),o($Vc,[2,15]),o($Vc,[2,16]),o($Vc,[2,17]),o($Vc,[2,18]),{19:51,20:52,22:$Vd,24:36,56:$Ve,57:$Vf,61:53,73:37,76:38,81:39,84:40,87:41,91:42,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk,98:$Va,99:$Vb},{22:$Vl,49:54,53:55,55:[1,56]},{23:[1,58],58:$Vm},{23:[1,60]},{23:[1,61],58:$Vn},{19:51,20:52,22:$Vd,24:63,56:$Ve,57:$Vf,61:53,73:37,76:38,81:39,84:40,87:41,91:42,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk,98:$Va,99:$Vb},{19:51,20:52,22:$Vd,24:64,56:$Ve,57:$Vf,61:53,73:37,76:38,81:39,84:40,87:41,91:42,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk,98:$Va,99:$Vb},{22:[1,65]},{19:51,20:52,22:$Vd,24:66,56:$Ve,57:$Vf,61:53,73:37,76:38,81:39,84:40,87:41,91:42,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk,98:$Va,99:$Vb},{4:67,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:$V0,22:$V1,27:$V2,30:$V3,33:$V4,34:$V5,37:$V6,44:$V7,48:$V8,49:21,53:23,61:22,72:$V9,98:$Va,99:$Vb},o($Vc,$Vo),o($Vc,[2,24]),o([23,58],$Vp,{70:$Vq,85:$Vr,86:$Vs}),{56:[1,71]},{56:[1,72]},{1:[2,1]},o($Vc,[2,4]),o($Vc,[2,67],{74:$Vt,75:$Vu}),o($Vv,[2,68],{77:$Vw,78:$Vx,79:$Vy,80:$Vz}),o($VA,[2,71],{82:$VB,83:$VC}),o($VD,[2,76],{85:$VE,86:$VF}),o($VG,[2,79],{88:$VH,89:$VI,90:$VJ}),o($VK,[2,82]),o($VK,[2,86],{92:[1,86]}),o($VL,[2,88],{70:$Vq}),o($VL,[2,89]),o($VL,[2,90]),o($VL,[2,91]),o($VL,[2,92]),o($VL,[2,93]),o($VL,[2,94]),{51:87,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ},o($VL,[2,96]),o($VL,[2,97]),o($VL,[2,98]),{50:[1,93],58:$Vm},{50:[1,94],58:$Vn},{56:[1,95]},o($VR,$Vp),{19:51,20:52,22:$Vd,24:96,56:$Ve,57:$Vf,61:53,73:37,76:38,81:39,84:40,87:41,91:42,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk,98:$Va,99:$Vb},{22:$Vl,49:97},{19:51,20:52,22:$Vd,24:98,56:$Ve,57:$Vf,61:53,73:37,76:38,81:39,84:40,87:41,91:42,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk,98:$Va,99:$Vb},{19:51,20:52,22:$Vd,24:100,54:99,56:$Ve,57:$Vf,61:53,73:37,76:38,81:39,84:40,87:41,91:42,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk,98:$Va,99:$Vb},{22:$Vl,49:101},{41:[1,102],74:$Vt,75:$Vu},{27:[1,103],74:$Vt,75:$Vu},{23:[1,104]},{27:[1,105],74:$Vt,75:$Vu},{6:35,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:$V0,22:$V1,27:$V2,30:$V3,32:[1,106],33:$V4,34:$V5,37:$V6,44:$V7,48:$V8,49:21,53:23,61:22,72:$V9,98:$Va,99:$Vb},{85:[1,107]},{86:[1,108]},{19:51,20:52,22:$Vd,24:109,56:$Ve,57:$Vf,61:53,73:37,76:38,81:39,84:40,87:41,91:42,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk,98:$Va,99:$Vb},{19:51,20:52,22:$Vd,24:110,56:$Ve,57:$Vf,61:53,73:37,76:38,81:39,84:40,87:41,91:42,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk,98:$Va,99:$Vb},{19:51,20:52,22:$Vd,24:111,56:$Ve,57:$Vf,61:53,73:37,76:38,81:39,84:40,87:41,91:42,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk,98:$Va,99:$Vb},{19:51,20:52,22:$Vd,56:$Ve,57:$Vf,61:53,73:112,76:38,81:39,84:40,87:41,91:42,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk,98:$Va,99:$Vb},{19:51,20:52,22:$Vd,56:$Ve,57:$Vf,61:53,73:113,76:38,81:39,84:40,87:41,91:42,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk,98:$Va,99:$Vb},{19:51,20:52,22:$Vd,56:$Ve,57:$Vf,61:53,76:114,81:39,84:40,87:41,91:42,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk,98:$Va,99:$Vb},{19:51,20:52,22:$Vd,56:$Ve,57:$Vf,61:53,76:115,81:39,84:40,87:41,91:42,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk,98:$Va,99:$Vb},{19:51,20:52,22:$Vd,56:$Ve,57:$Vf,61:53,76:116,81:39,84:40,87:41,91:42,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk,98:$Va,99:$Vb},{19:51,20:52,22:$Vd,56:$Ve,57:$Vf,61:53,76:117,81:39,84:40,87:41,91:42,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk,98:$Va,99:$Vb},{19:51,20:52,22:$Vd,56:$Ve,57:$Vf,61:53,81:118,84:40,87:41,91:42,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk,98:$Va,99:$Vb},{19:51,20:52,22:$Vd,56:$Ve,57:$Vf,61:53,81:119,84:40,87:41,91:42,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk,98:$Va,99:$Vb},{19:51,20:52,22:$Vd,56:$Ve,57:$Vf,61:53,84:120,87:41,91:42,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk,98:$Va,99:$Vb},{19:51,20:52,22:$Vd,56:$Ve,57:$Vf,61:53,84:121,87:41,91:42,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk,98:$Va,99:$Vb},{19:51,20:52,22:$Vd,56:$Ve,57:$Vf,61:53,87:122,91:42,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk,98:$Va,99:$Vb},{19:51,20:52,22:$Vd,56:$Ve,57:$Vf,61:53,87:123,91:42,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk,98:$Va,99:$Vb},{19:51,20:52,22:$Vd,56:$Ve,57:$Vf,61:53,87:124,91:42,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk,98:$Va,99:$Vb},{19:51,20:52,22:$Vd,56:$Ve,57:$Vf,61:53,87:125,91:42,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk,98:$Va,99:$Vb},{59:[1,126]},o($VS,[2,52]),o($VS,[2,53]),o($VS,[2,54]),o($VS,[2,55]),o($VS,[2,56]),{51:127,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ},{51:128,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ},{57:[1,129]},o($Vc,[2,44],{74:$Vt,75:$Vu}),o($VR,[2,47]),o($Vc,[2,45],{74:$Vt,75:$Vu}),o($Vc,[2,46],{58:$VT}),{58:[1,131],74:$Vt,75:$Vu},o($VR,[2,48]),{4:132,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:$V0,22:$V1,27:$V2,30:$V3,33:$V4,34:$V5,37:$V6,44:$V7,48:$V8,49:21,53:23,61:22,72:$V9,98:$Va,99:$Vb},{38:133,42:134,43:$VU},{19:51,20:52,22:$Vd,24:136,56:$Ve,57:$Vf,61:53,73:37,76:38,81:39,84:40,87:41,91:42,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk,98:$Va,99:$Vb},{4:137,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:$V0,22:$V1,27:$V2,30:$V3,33:$V4,34:$V5,37:$V6,44:$V7,48:$V8,49:21,53:23,61:22,72:$V9,98:$Va,99:$Vb},{19:51,20:52,22:$Vd,24:138,56:$Ve,57:$Vf,61:53,73:37,76:38,81:39,84:40,87:41,91:42,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk,98:$Va,99:$Vb},o($Vc,[2,101]),o($Vc,[2,102]),{71:[1,139],74:$Vt,75:$Vu},{59:[1,140],74:$Vt,75:$Vu},{59:[1,141],74:$Vt,75:$Vu},o($Vv,[2,69],{77:$Vw,78:$Vx,79:$Vy,80:$Vz}),o($Vv,[2,70],{77:$Vw,78:$Vx,79:$Vy,80:$Vz}),o($VA,[2,72],{82:$VB,83:$VC}),o($VA,[2,73],{82:$VB,83:$VC}),o($VA,[2,74],{82:$VB,83:$VC}),o($VA,[2,75],{82:$VB,83:$VC}),o($VD,[2,77],{85:$VE,86:$VF}),o($VD,[2,78],{85:$VE,86:$VF}),o($VG,[2,80],{88:$VH,89:$VI,90:$VJ}),o($VG,[2,81],{88:$VH,89:$VI,90:$VJ}),o($VK,[2,83]),o($VK,[2,84]),o($VK,[2,85]),o($VK,[2,87]),{19:51,20:52,22:$Vd,56:$Ve,57:$Vf,61:53,91:142,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk,98:$Va,99:$Vb},o($Vc,[2,38],{52:[1,143]}),o($Vc,[2,40],{52:[1,144]}),{58:[1,145]},{19:51,20:52,22:$Vd,24:146,56:$Ve,57:$Vf,61:53,73:37,76:38,81:39,84:40,87:41,91:42,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk,98:$Va,99:$Vb},{19:51,20:52,22:$Vd,24:147,56:$Ve,57:$Vf,61:53,73:37,76:38,81:39,84:40,87:41,91:42,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk,98:$Va,99:$Vb},{6:35,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:$V0,22:$V1,27:$V2,30:$V3,33:$V4,34:$V5,37:$V6,40:[1,149],44:$V7,45:[1,148],46:150,47:[1,151],48:$V8,49:21,53:23,61:22,72:$V9,98:$Va,99:$Vb},{39:[1,152],40:[1,153],42:154,43:$VU},o($VV,[2,29]),{19:51,20:52,22:$Vd,24:155,56:$Ve,57:$Vf,61:53,73:37,76:38,81:39,84:40,87:41,91:42,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk,98:$Va,99:$Vb},{25:[1,156],74:$Vt,75:$Vu},{6:35,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:$V0,22:$V1,27:$V2,30:$V3,31:[1,157],33:$V4,34:$V5,37:$V6,44:$V7,48:$V8,49:21,53:23,61:22,72:$V9,98:$Va,99:$Vb},o($Vc,[2,22],{74:$Vt,75:$Vu}),o($VW,[2,64],{70:[1,158]}),o($VL,[2,99]),o($VL,[2,100]),o($VL,[2,95]),{19:51,20:52,22:$Vd,24:159,56:$Ve,57:$Vf,61:53,73:37,76:38,81:39,84:40,87:41,91:42,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk,98:$Va,99:$Vb},{19:51,20:52,22:$Vd,24:100,54:160,56:$Ve,57:$Vf,61:53,73:37,76:38,81:39,84:40,87:41,91:42,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk,98:$Va,99:$Vb},{51:161,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ},o($VX,[2,50],{74:$Vt,75:$Vu}),o($VX,[2,49],{74:$Vt,75:$Vu}),o($Vc,[2,32]),{4:162,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:$V0,22:$V1,27:$V2,30:$V3,33:$V4,34:$V5,37:$V6,44:$V7,48:$V8,49:21,53:23,61:22,72:$V9,98:$Va,99:$Vb},{40:[1,164],45:[1,163],47:[1,165]},{19:51,20:52,22:$Vd,24:166,56:$Ve,57:$Vf,61:53,73:37,76:38,81:39,84:40,87:41,91:42,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk,98:$Va,99:$Vb},o($Vc,[2,27]),{41:[1,167]},o($VV,[2,30]),{41:[1,168],74:$Vt,75:$Vu},{19:51,20:52,22:$Vd,24:169,56:$Ve,57:$Vf,61:53,73:37,76:38,81:39,84:40,87:41,91:42,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk,98:$Va,99:$Vb},o($Vc,[2,21]),{19:51,20:52,22:$Vd,24:170,56:$Ve,57:$Vf,61:53,73:37,76:38,81:39,84:40,87:41,91:42,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk,98:$Va,99:$Vb},o($Vc,[2,39],{74:$Vt,75:$Vu}),o($Vc,[2,41],{58:$VT}),{59:[1,171]},{6:35,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:$V0,22:$V1,27:$V2,30:$V3,33:$V4,34:$V5,37:$V6,44:$V7,45:[1,172],48:$V8,49:21,53:23,61:22,72:$V9,98:$Va,99:$Vb},o($Vc,[2,34]),{4:173,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:$V0,22:$V1,27:$V2,30:$V3,33:$V4,34:$V5,37:$V6,44:$V7,48:$V8,49:21,53:23,61:22,72:$V9,98:$Va,99:$Vb},{19:51,20:52,22:$Vd,24:174,56:$Ve,57:$Vf,61:53,73:37,76:38,81:39,84:40,87:41,91:42,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk,98:$Va,99:$Vb},{41:[1,175],74:$Vt,75:$Vu},{4:176,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:$V0,22:$V1,27:$V2,30:$V3,33:$V4,34:$V5,37:$V6,44:$V7,48:$V8,49:21,53:23,61:22,72:$V9,98:$Va,99:$Vb},{4:177,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:$V0,22:$V1,27:$V2,30:$V3,33:$V4,34:$V5,37:$V6,44:$V7,48:$V8,49:21,53:23,61:22,72:$V9,98:$Va,99:$Vb},{26:[1,178],29:[1,179],74:$Vt,75:$Vu},{71:[1,180],74:$Vt,75:$Vu},{22:[1,181]},o($Vc,[2,33]),{6:35,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:$V0,22:$V1,27:$V2,30:$V3,33:$V4,34:$V5,37:$V6,44:$V7,45:[1,182],48:$V8,49:21,53:23,61:22,72:$V9,98:$Va,99:$Vb},{41:[1,183],74:$Vt,75:$Vu},{4:184,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:$V0,22:$V1,27:$V2,30:$V3,33:$V4,34:$V5,37:$V6,44:$V7,48:$V8,49:21,53:23,61:22,72:$V9,98:$Va,99:$Vb},{6:35,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:$V0,22:$V1,27:$V2,30:$V3,33:[1,185],34:$V5,37:$V6,44:$V7,48:$V8,49:21,53:23,61:22,72:$V9,98:$Va,99:$Vb},{6:35,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:$V0,22:$V1,27:$V2,30:$V3,33:[1,186],34:$V5,37:$V6,44:$V7,48:$V8,49:21,53:23,61:22,72:$V9,98:$Va,99:$Vb},{17:187,22:[1,188]},{18:189,22:[1,190]},o($VW,[2,65],{70:[1,191]}),o($Vc,[2,43],{23:[1,192]}),o($Vc,[2,35]),{4:193,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:$V0,22:$V1,27:$V2,30:$V3,33:$V4,34:$V5,37:$V6,44:$V7,48:$V8,49:21,53:23,61:22,72:$V9,98:$Va,99:$Vb},o($VY,[2,36],{7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,49:21,61:22,53:23,6:35,21:$V0,22:$V1,27:$V2,30:$V3,33:$V4,34:$V5,37:$V6,44:$V7,48:$V8,72:$V9,98:$Va,99:$Vb}),o($VZ,$Vo,{39:[1,194]}),o($VZ,$Vo,{39:$V_,40:$V_,43:$V_}),{27:[1,195]},{85:$Vr},{27:[1,196]},{86:$Vs},{19:51,20:52,22:$Vd,24:197,56:$Ve,57:$Vf,61:53,73:37,76:38,81:39,84:40,87:41,91:42,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk,98:$Va,99:$Vb},{56:[1,198]},o($VY,[2,37],{7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,49:21,61:22,53:23,6:35,21:$V0,22:$V1,27:$V2,30:$V3,33:$V4,34:$V5,37:$V6,44:$V7,48:$V8,72:$V9,98:$Va,99:$Vb}),o($Vc,[2,28]),{4:199,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:$V0,22:$V1,27:$V2,30:$V3,33:$V4,34:$V5,37:$V6,44:$V7,48:$V8,49:21,53:23,61:22,72:$V9,98:$Va,99:$Vb},{4:200,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:$V0,22:$V1,27:$V2,30:$V3,33:$V4,34:$V5,37:$V6,44:$V7,48:$V8,49:21,53:23,61:22,72:$V9,98:$Va,99:$Vb},{71:[1,201],74:$Vt,75:$Vu},{19:51,20:52,22:$Vd,24:206,56:$V$,57:$Vf,60:202,61:53,67:203,68:204,69:205,73:37,76:38,81:39,84:40,87:41,91:42,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk,98:$Va,99:$Vb},{6:35,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:$V0,22:$V1,27:$V2,28:[1,208],30:$V3,33:$V4,34:$V5,37:$V6,44:$V7,48:$V8,49:21,53:23,61:22,72:$V9,98:$Va,99:$Vb},{6:35,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:$V0,22:$V1,27:$V2,28:[1,209],30:$V3,33:$V4,34:$V5,37:$V6,44:$V7,48:$V8,49:21,53:23,61:22,72:$V9,98:$Va,99:$Vb},o($VW,[2,66]),{59:[1,210]},{59:[2,57]},{58:[1,211],59:[2,58]},{58:[1,212],59:[2,60]},o($V01,[2,62],{74:$Vt,75:$Vu}),{19:51,20:52,22:$Vd,24:206,51:87,56:$V$,57:$Vf,61:53,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:213,68:204,69:205,73:37,76:38,81:39,84:40,87:41,91:42,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk,98:$Va,99:$Vb},o($Vc,[2,19]),o($Vc,[2,20]),o($Vc,[2,42]),{19:51,20:52,22:$Vd,24:206,56:$V$,57:$Vf,61:53,67:214,68:204,69:205,73:37,76:38,81:39,84:40,87:41,91:42,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk,98:$Va,99:$Vb},{19:51,20:52,22:$Vd,24:206,56:$V$,57:$Vf,61:53,67:215,68:204,69:205,73:37,76:38,81:39,84:40,87:41,91:42,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk,98:$Va,99:$Vb},{59:[1,216]},{59:[2,59]},{59:[2,61]},o($V01,[2,63])],
defaultActions: {3:[2,2],34:[2,1],203:[2,57],214:[2,59],215:[2,61]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

/* Importamos los nodos del AST y errores */
const { RuntimeError } = require('../interpreter/Errors');

// Nodos literales
const { NumberLiteralNode } = require('../ast/literals/NumberLiteralNode');
const { StringLiteralNode } = require('../ast/literals/StringLiteralNode');
const { BooleanLiteralNode } = require('../ast/literals/BooleanLiteralNode');
const { CharacterLiteralNode } = require('../ast/literals/CharacterLiteralNode');

// Nodos de identificadores y programa
const { IdentifierNode } = require('../ast/IdentifierNode');
const { ProgramNode } = require('../ast/ProgramNode');
const { PrintNode } = require('../ast/PrintNode');
const { VariableDeclarationNode } = require('../ast/VariableDeclarationNode');
const { VariableAssignmentNode } = require('../ast/VariableAssignmentNode');

// Operadores aritmu00e9ticos
const { AddNode } = require('../ast/operators/AddNode');
const { SubNode } = require('../ast/operators/SubNode');
const { MulNode } = require('../ast/operators/MulNode');
const { DivNode } = require('../ast/operators/DivNode');
const { PowNode } = require('../ast/operators/PowNode');
const { ModNode } = require('../ast/operators/ModNode');

// Operadores de comparaciu00f3n
const { LessNode } = require('../ast/operators/LessNode');
const { GreaterNode } = require('../ast/operators/GreaterNode');
const { LessEqualNode } = require('../ast/operators/LessEqualNode');
const { GreaterEqualNode } = require('../ast/operators/GreaterEqualNode');

// Operadores de igualdad
const { EqualNode } = require('../ast/operators/EqualNode');
const { NotEqualNode } = require('../ast/operators/NotEqualNode');

// Operadores lu00f3gicos
const { AndNode } = require('../ast/operators/AndNode');
const { OrNode } = require('../ast/operators/OrNode');

// Operaciones de casteo
const { CastNode } = require('../ast/operators/CastNode');

// Operaciones de incremento y decremento
const { IncrementNode } = require('../ast/operators/IncrementNode');
const { DecrementNode } = require('../ast/operators/DecrementNode');

// Nodos para listas
const { ListDeclarationNode } = require('../ast/ListDeclarationNode');
const { ListAccessNode } = require('../ast/ListAccessNode');
const { ListAssignmentNode } = require('../ast/ListAssignmentNode');
const { ListValueNode } = require('../ast/ListValueNode');
const { SwitchNode } = require('../ast/SwitchNode');
const { ForNode } = require('../ast/ForNode');
const { BreakNode } = require('../ast/BreakNode');
const { ContinueNode } = require('../ast/ContinueNode');
const { ReturnNode } = require('../ast/ReturnNode');
const { WhileNode } = require('../ast/WhileNode');
const { DoUntilNode } = require('../ast/DoUntilNode');

// Nodos para estructuras de control
const { IfNode } = require('../ast/IfNode');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 48;
break;
case 5:return 50;
break;
case 6:return 52;
break;
case 7:return 72;
break;
case 8:return 96;
break;
case 9:return 97;
break;
case 10:return 62;
break;
case 11:return 63;
break;
case 12:return 64;
break;
case 13:return 65;
break;
case 14:return 66;
break;
case 15:return 98;
break;
case 16:return 99;
break;
case 17:return 55;
break;
case 18:return 44;
break;
case 19:return 41;
break;
case 20:return 40;
break;
case 21:return 47;
break;
case 22:return 45;
break;
case 23:return 37;
break;
case 24:return 27;
break;
case 25:return 43;
break;
case 26:return 33;
break;
case 27:return 39;
break;
case 28:return 21;
break;
case 29:return 25;
break;
case 30:return 26;
break;
case 31:return 29;
break;
case 32:return 28;
break;
case 33:return 34;
break;
case 34:return 36;
break;
case 35:return 30;
break;
case 36:return 31;
break;
case 37:return 27;
break;
case 38:return 32;
break;
case 39:return 23;
break;
case 40:return 79;
break;
case 41:return 80;
break;
case 42:return 82;
break;
case 43:return 83;
break;
case 44:return 74;
break;
case 45:return 75;
break;
case 46:return 70;
break;
case 47:return 71;
break;
case 48:return 56;
break;
case 49:return 59;
break;
case 50:return 'LEFTBRACE';
break;
case 51:return 'RIGHTBRACE';
break;
case 52:return 86;       // "RESTA"
break;
case 53:return 85;        // "SUMA"
break;
case 54:return 88;    // "MULTIPLICACION"
break;
case 55:return 89;      // "DIVISION"
break;
case 56:return 92;       // "POTENCIA"
break;
case 57:return 90;         // "MODULO"
break;
case 58:return 'EQUALS';
break;
case 59:return 'NOT';
break;
case 60:return 77;
break;
case 61:return 78;
break;
case 62:return 'DOT';
break;
case 63:return 58;
break;
case 64:return 93;
break;
case 65:return 57;
break;
case 66:return 22;
break;
case 67:return 94;
break;
case 68:return 95;
break;
case 69:return 5;
break;
case 70:return 'INVALID';
break;
}
},
rules: [/^(?:([ \t\r]+))/,/^(?:(\/\/.*))/,/^(?:([/][*][^*]*[*]+([^/*][^*]*[*]+)*[/]))/,/^(?:(\n))/,/^(?:ingresar\b)/,/^(?:como\b)/,/^(?:con valor\b)/,/^(?:imprimir\b)/,/^(?:verdadero\b)/,/^(?:falso\b)/,/^(?:entero\b)/,/^(?:decimal\b)/,/^(?:cadena\b)/,/^(?:caracter\b)/,/^(?:booleano\b)/,/^(?:inc\b)/,/^(?:dec\b)/,/^(?:lista\b)/,/^(?:si\b)/,/^(?:entonces\b)/,/^(?:de lo contrario\b)/,/^(?:o si\b)/,/^(?:fin si\b)/,/^(?:segun\b)/,/^(?:hacer\b)/,/^(?:en caso de ser\b)/,/^(?:detener\b)/,/^(?:fin segun\b)/,/^(?:para\b)/,/^(?:hasta\b)/,/^(?:con incremento\b)/,/^(?:con decremento\b)/,/^(?:fin para\b)/,/^(?:continuar\b)/,/^(?:retornar\b)/,/^(?:mientras\b)/,/^(?:fin mientras\b)/,/^(?:repetir\b)/,/^(?:hasta que\b)/,/^(?:->)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:-)/,/^(?:\+)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:=)/,/^(?:!)/,/^(?:<)/,/^(?:>)/,/^(?:\.)/,/^(?:,)/,/^(?:((([0-9])+)\.(([0-9])+)))/,/^(?:(([0-9])+))/,/^(?:(([a-zA-Z])[_A-Za-z0-9]*))/,/^(?:("([^\"\\]|\\.)*"))/,/^(?:('[^\']'))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}